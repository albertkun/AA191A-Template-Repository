{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":true},"docs":[{"location":"","text":"<p>This is the course material and syllabus for Asian American Studies 191A Web Development and GIS for Social Change: Critical Data for Transforming Civil Society.</p>","title":"Welcome"},{"location":"#class-links","text":"Description Link     Course GitHub Repository https://github.com/albertkun/21S-ASIAAM-191A","title":"Class Links"},{"location":"#class-details","text":"<p>Asian American Studies Department, Spring, 2022</p> <p>TBD</p>","title":"Class Details"},{"location":"#instructor","text":"<p>Albert Kochaphum (albertkun@ucla.edu)</p>","title":"Instructor"},{"location":"#office-hours","text":"<p>Thursdays 4pm \u2013 5pm and by appointment below: - https://calendly.com/albertkun/office-hours</p>","title":"Office Hours"},{"location":"#preparation","text":"<ul> <li>Fill out the pre-course survey before the first day of instruction.</li> </ul>","title":"Preparation"},{"location":"#please-note-this-syllabus-is-subject-to-change","text":"<p></p> <p>(Lam, C., Kochaphum, A., UCLA HateCrimeMap, 2020)</p> <p>\u201cMaps have always been made; they may have been one of the first forms of human communication. Maps exist in many forms, can represent different ideas and are used for many purposes. In choosing what to represent, how to represent it and what not to represent, maps are expressions of power.\u201d \u2013Logan Cochrane, Jon Corbett and Peter Keller, Impact of Community-based and Participatory Mapping</p>","title":"Please note: This syllabus is subject to change."},{"location":"#course-description","text":"<p>Welcome to our journey into web programming and mapping! This course is designed for non-mappers and non-coders to bridge the divide between spatial data and using it in the non-profit world for acvitism.</p> <p>Spatial data is all around us, whether its survey information with zip codes or the various landmarks that comprise what people consider their neighborhood. While maps, like census tracts or political boundaries are traditionally extensions of authorities of power, participatory mapping seeks to break down those barriers. The objective of this course is to put mapping into the hands of students so that they can transfer these skills and frameworks to civil society.</p> <p>The way COVID-19 played out in the United States underscored the institutional problems related to health, inequality, and the environment in the United States of America. The global crisis of climate change reinforces the institutional racism and environmental issues that have proliferated far beyond the U.S. national borders. Given all these issues, more so than ever, civil society is needed to build the coalitions and reassess priorities to usher in an era of political change.</p> <p>Mapping and data are transformative tools that strengthen these connections between coalitions because they are representations of the physical world around us. However, in non-profits and other fields of civic engagement, these tools are underutilized or simply seen as tools \u201cleft to the experts\u201d. This course prepares students to be informed digital citizens and transfer these tools for practical application in civil society. The two main objectives for this course are:  1. To walk away with technical web development skills relevant to mapping for civil society 2. To apply an ethical mapping framework to such projects.</p>","title":"Course Description"},{"location":"#course-objectives","text":"<ul> <li> <p>Undertake analysis that are informed by critical data studies,     participatory frameworks, social fieldwork, and ethical     considerations.</p> </li> <li> <p>Learn transferable technical data and mapping skills as applied     through action-oriented, collaborative, and project-based research.</p> </li> <li> <p>Learn to critically assess datasets, digital mapping/ visualization     technologies for use in non-profits</p> </li> <li> <p>Learn to create an interactive web map that uses community-based     data from a non-profit or community-based organization</p> </li> <li> <p>Perform a data needs assessment for non-profits for an interactive     map that enhances the mission/goals of the organization</p> </li> <li> <p>Learn to work in research teams in order to conceptualize, design,     carry out, and deliver persuasive arguments through presenting a web     site that includes a web map and other digital media.</p> </li> </ul>","title":"Course Objectives"},{"location":"#course-materials","text":"<p>Dougherty, J. and Ilyankou, I. \u201cHands-On Data Visualization: Interactive Storytelling from Spreadsheets to Code\u201d O\u2019Reilly Media, Inc. (2021). Available at https://handsondataviz.org/</p>","title":"Course materials"},{"location":"#remote-learning-expectations-for-students","text":"<p>Even though remote learning has been in session for more than a year, students are expected to be respectful of various difficulties associated with online instruction that others may have. I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment. You can also report any incidents you may witness or experience online the Office of Equity, Diversity, and Inclusion on their website. Basic Zoom protocols for this course are as follows:</p> <ul> <li> <p>Mute microphones when not talking</p> </li> <li> <p>Feel free to use the chat to ask questions at any time</p> </li> <li> <p>Ensure that your preferred name and pronouns are included in your     Zoom name</p> </li> <li> <p>Though encouraged, video cameras are optional</p> <ul> <li>If cameras are turned off, please provide a profile picture, this will help me to identify you throughout the course </li> </ul> </li> </ul>","title":"Remote Learning Expectations for Students"},{"location":"#lab-requirements","text":"<p>Lab assignments will require Microsoft Visual Studio Code in addition to Git. Firefox, a modern web-browser with built-in debugging is highly recommended. Use of other software is allowed but not supported (i.e. you are on your own to troubleshoot).</p> <p>Please be sure to have required software installed prior to lab sessions. Reach out if there are any installation issues or concerns before labs.</p>","title":"Lab Requirements"},{"location":"#lab-assistance","text":"<p>While the goal in the course is to ease everyone into GIS and writing code, I understand that the process may be intimidating and difficult. Rest assured that your success is my success, and I will try my best in making a learning environment that breaks down these initial barriers. We all have gone through the same struggles learning new technology, and I strongly encourage you get help as often as possible. Steps for troubleshooting technical problems can often be solved by a quick online search or reviewing lab materials for a misstep. The class community discussion forums is another resource for help. Regardless, do not hesitate to reach out to me for help.</p>","title":"Lab Assistance"},{"location":"#assignments-and-evaluation","text":"<p>Students will be evaluated based on individual lab assignments, participation, and team based final project. Students are expected to attend all lectures and labs each week.</p> <ul> <li>45% = Group project and assignments</li> <li>45% = Individual class assignments</li> <li>10% = Preparation and participation in class</li> </ul>    Task Number of items Points Total Points Total Grade     Individual assignments 15 30 450 45%   Final Project and Presentation 1 250 250 25%   Group Project Assignments 4 50 200 20%   Participation   100 10%   Grand Total   1000 100%","title":"Assignments and Evaluation"},{"location":"#participation","text":"<p>While participation is a bit subjective, as long as you are active in the course you should not worry. The following are examples of active participation:   - Participating in class discussions    - Asking questions on the GitHub discussion board    - Helping other students on the discussion board   - Coming to office hours   - Overall class attendence</p>","title":"Participation"},{"location":"#extra-credit","text":"<p>Extra credit will be given to students that provide exceptional work or contributions throughout the course. Optional assignments are opportunities for extra credit as well.</p>","title":"Extra Credit"},{"location":"#course-expectations","text":"<p>UCLA\u2019s Office for Equity, Diversity, and Inclusion provides resources, events, and information about current initiatives at UCLA to support equality for all members of the UCLA community. I hope that you will communicate with me if you experience anything in this course that does not support an inclusive environment, and you can also report any incidents you may witness or experience on campus to the Office of Equity, Diversity, and Inclusion.</p> <p>I expect you to take advantage of the opportunities that this course offers you by being an active and thoughtful participant in all sections and lectures, by coming to lecture and section prepared, and by trying your best on the various elements of the course. I expect you to take ownership of your learning and to reach out to me if you are struggling or have concerns. I expect you to take the opportunity to learn from your peers through activities in lecture and section, and I expect you to be respectful and courteous to one another. Finally, I expect you to hold yourself to the highest standards for academic honesty and integrity in your work.</p>","title":"Course Expectations"},{"location":"#course-outline","text":"","title":"Course Outline"},{"location":"#preparation_1","text":"<ul> <li>Fill out the pre-course survey</li> <li>Download and install VS Code</li> <li>Download and install Firefox</li> </ul> <p>If you have any issues with installing the above, please do not hesitate to contact me at albertkun@ucla.edu.</p>    Week Topics     1 Introduction to GIS, data, and ethics   2 Critical Cartography and Civil Society   3 Society, Technology, and Ethics   4 Developing for Civil Society   5 Society, Technology, and Ethics   6 Human-Centered Design  7 From Design to Data Justice  8 Mentorship and Collaboration  9 Connecting Activism and Technology  10 Beyond Web Development and Social Change  Finals Final presentations","title":"Preparation"},{"location":"#student-resources-for-support-and-learning","text":"","title":"Student Resources for Support and Learning"},{"location":"#providing-feedback","text":"<p>I encourage your feedback at any time throughout the quarter about things that are helping you learn or difficult concepts. Please communicate with me if there are ways that we can improve the course to better support student learning.</p>","title":"Providing feedback"},{"location":"#personal-problems","text":"<p>I understand that sometimes life makes it difficult to focus on schoolwork. If you are having a personal problem that affects your participation in this course, please talk to me to create a plan. Please do not wait until the end of the quarter to share any challenges that have negatively impacted your engagement and academic performance.\u00a0The sooner we meet, the more options we will have available\u00a0able to discuss to support your overall academic success.</p>","title":"Personal Problems"},{"location":"#academic-accommodations-based-on-a-disability","text":"<p>Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310)825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu.</p>","title":"Academic Accommodations Based on a Disability"},{"location":"Guides/git_cloning/","text":"<ol> <li> <p>Launch VS Code from Launcher (Mac) or Start Menu (PC)</p> </li> <li> <p>On the <code>Welcome</code> screen click <code>Clone Repository</code>:</p> </li> </ol> <p></p> <ol> <li>Click <code>Clone from GitHub</code></li> </ol> <p></p> <ol> <li>Allow GitHub to sign in Accept the following dialogue box:</li> </ol> <p></p> <ol> <li>Click <code>Continue</code> in the web browser that opens up:</li> </ol> <p></p> <ol> <li>Click <code>Choose Application</code></li> </ol> <p></p> <ol> <li>Click Open Link:</li> </ol> <p></p> <ol> <li>Click <code>Open</code>:</li> </ol> <p></p> <ol> <li>Search for the class repository by typing <code>21S-191A-AsianAm</code> and     then select the repository: albertkun/21S-ASIAAM-191A</li> </ol> <p></p> <ol> <li>Select a folder to clone into:</li> </ol> <p></p> <ol> <li>Click <code>Open</code> in your locally cloned repo:</li> </ol> <p></p> <ol> <li>You can see the files by clicking on the Explorer to the right:</li> </ol> <p></p> <ol> <li>Now you are ready for all labs!</li> </ol>","title":"Guide for cloning"},{"location":"Guides/git_commit/","text":"","title":"Guide for using Git Commit in VS Code"},{"location":"Guides/git_commit/#requirements","text":"<ul> <li>Git Clone completed</li> <li>Git Fork completed</li> <li>Git Fetch completed</li> </ul> <p>This guide will walk you through how to push to your lab assignment repo after you have finished your assignments.</p> <ol> <li> <p>Make sure the explorer bar is active</p> </li> <li> <p>Make sure you have changes to commit, for example you should have modified a file (M), created a file (U), or deleted a file (D). </p> </li> <li>Click on \u201cVersion Control\u201d in the Activity Bar </li> <li>Add a commit message that is meaningful </li> <li>Click the checkmark </li> <li>Click the expanded options menu </li> <li>Choose \u201cPush\u201d to push to GitHub </li> <li>Go to your GitHub repository and check to see if your repository has updated. </li> </ol>","title":"Requirements:"},{"location":"Guides/git_creating/","text":"<p>This guide is designed to show you how to create a repository and add group members.</p> <ol> <li>After logging in to GitHub click the plus icon and choose <code>New     repository</code>:</li> </ol>  <p></p>  <ol> <li>Input your group name:</li> </ol>  <p></p>  <ol> <li>Click <code>Create Repository</code>:</li> </ol>  <p></p>","title":"Guide for creating a repository"},{"location":"Guides/git_creating/#adding-your-partners-as-collaborators","text":"<ol> <li>Go to settings:</li> </ol>  <p></p>  <ol> <li>Click manage access:</li> </ol>  <p></p>  <ol> <li>Click invite a collaborator:</li> </ol>  <p></p>  <ol> <li>Search for your teammate\u2019s email or username:</li> </ol>  <p></p>  <ol> <li>Click:</li> </ol>  <p></p>  <ol> <li>And add:</li> </ol>  <p></p>  <ol> <li>Remember to clone the repository locally and start collaborating!</li> </ol>","title":"Adding your partners as collaborators"},{"location":"Guides/git_creating/#warnings-about-merge-conflicts","text":"<ol> <li> <p>If you do not use <code>git pull</code> to update periodically update repository and/or push     your changes, you may run into <code>merge conflicts</code> when two files are being edited at the same time.</p> </li> <li> <p>If you do run into a <code>merge conflict</code>, someone should merge the     conflicting files. Please or check out this article on merge conflicts:</p> </li> </ol> <p>https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts</p> <ol> <li>We will be covering merge conflicts in detail a little later.</li> </ol>","title":"Warnings about \u201cMerge Conflicts\u201d"},{"location":"Guides/git_fetch_remote_upstream/","text":"","title":"Updating the Lab Assignment repo"},{"location":"Guides/git_fetch_remote_upstream/#requirements","text":"<ul> <li>Forked Lab Assignment repo guide completed</li> </ul> <p>This guide will walk you through how to update the forked lab assignment repo. </p>","title":"Requirements:"},{"location":"Guides/git_fetch_remote_upstream/#open-the-lab-assignment-repository","text":"<p>In VS Code find and open the folder for the lab assignment repository. </p> <p>If you recently worked on the lab you can find it in the \u201cRecent\u201d section like so: </p> <p>Checking the Remote Upstream To make sure that the remote upstream is correct, run the command:</p>  <p><code>git remote --v</code></p>  <p>The <code>origin</code> should be set to your account, while the <code>upstream</code> to be set to the instructors account <code>albertkun</code>:</p> <p></p>","title":"Open the Lab Assignment repository"},{"location":"Guides/git_fetch_remote_upstream/#wrong-upstream","text":"<p>If you have the wrong upstream, remove the current <code>upstream</code> by running: </p>  <p><code>git remote rm upstream</code></p>  <p>And then add the correct upstream by running:</p>  <p><code>git remote add upstream https://github.com/albertkun/21S-ASIAAM-191A-Assignments.git</code></p>","title":"Wrong upstream?"},{"location":"Guides/git_fetch_remote_upstream/#update-the-repo","text":"<p>As with every week, start with pulling from the main repository by running:</p>  <p><code>git pull upstream main</code></p>  <p>It should look something similar to this: </p> <p>Open the Explorer tab in the activity bar to see if the new week has appeared: </p> <p>If it has, then congratulations, it should look something like this: </p>","title":"Update the repo"},{"location":"Guides/git_forking/","text":"<ol> <li>Go to the Lab Assignments Repository:</li> </ol>  <p>https://github.com/albertkun/21S-ASIAAM-191A-Assignments/</p>  <ol> <li>Click on the <code>Fork</code> button.</li> </ol>  <p></p>  <ol> <li> <p>Go to your cloned repository:</p> </li> <li> <p>Click on     <code>Code</code></p> </li> <li> <p>Click on <code>Copy</code></p> </li> </ol>  <p></p>  <ol> <li>Click <code>Clone Repository</code></li> </ol>  <p></p>  <ol> <li>Paste your copied forked repository:</li> </ol>  <p></p>  <ol> <li>Open the cloned repo:</li> </ol>  <p></p>  <ol> <li>Click on Terminal:</li> </ol>  <p></p>  <ol> <li>Open a New Terminal:</li> </ol>  <p></p>  <ol> <li>Run the following <code>git remote add upstream https://github.com/albertkun/21S-ASIAAM-191A-Assignments.git</code></li> </ol>  <p></p>  <ol> <li>Run <code>git remote \u2013v</code> to check:</li> </ol>  <p></p>  <p>Getting New Assignments:</p> <ol> <li>To get new assignments run <code>git pull upstream main</code></li> </ol>  <p></p>  <p>Submitting Assignments:</p> <ol> <li>Click on the Explorer:</li> </ol>  <p></p>  <ol> <li>Got to week 1:</li> </ol>  <p></p>  <ol> <li>Click on the readme.md:</li> </ol>  <p></p>  <ol> <li>Go ahead an make a new file by clicking on the new file icon:</li> </ol>  <p></p>  <ol> <li>Name it lab1.md:</li> </ol>  <p></p>  <ol> <li>Finish the lab by answering the questions and adding your GeoJSON     file to this same folder.</li> </ol>  <p></p>  <ol> <li>Enter a commit message:</li> </ol>  <p></p>  <ol> <li>Press the Check mark or Alt + Enter to commit:</li> </ol>  <p></p>  <ol> <li>Click the expand menu button:</li> </ol>  <p></p>  <ol> <li>Click <code>push</code></li> </ol>  <p></p>  <ol> <li>Congrats you have submitted the assignment!</li> </ol>","title":"Guide for forking"},{"location":"Guides/github_sign_up/","text":"<ol> <li>Go to GitHub.com</li> </ol> <p></p> <ol> <li>Click on Sign-up</li> </ol> <p></p> <ol> <li>Create an account:</li> </ol> <p></p> <ol> <li>Check your email to verify:</li> </ol> <p></p> <ol> <li>Remember your username and email! It will be necessary for setting up GitSCM!</li> </ol>","title":"Guide for signing up to GitHub"},{"location":"Guides/gitscm/","text":"<ol> <li> <p>Go to: https://git-scm.com/</p> </li> <li> <p>Download and install:</p> <p>A.  For PC: -  Run the installer and go through the installation wizard.  -  </p> <p>B.  For Mac: - Make sure you have Homebrew installed</p> <ul> <li> <p>Open launcher and search \u201cterminal\u201d: </p> </li> <li> <p>In the terminal then type run <code>brew install git</code>: </p> </li> </ul> </li> <li> <p>Launch the command prompt (PC) or stay inside the terminal (Mac) and run <code>git --version</code> to test the installation:      </p> <ul> <li>If it is working, move to step 4</li> <li>If it is not working, send an email or post on the GitHub discussion board.</li> </ul> </li> </ol>  <ol> <li> <p>Set our identity to our GitHub username for Git by running: <code>git config --global user.name \"YOUR_GITHUB_USERNAME\"</code></p> <ul> <li>Remember to change <code>\"YOUR_GITHUB_USERNAME\"</code> to your actual GitHub Username and include the double quotes <code>\" \"</code></li> </ul> </li> <li> <p>Now set your email to the email you signed up with GitHub by running : <code>git config --global user.email YOUR@EMAIL.COM</code></p> <ul> <li>Remember to change <code>YOUR@EMAIL.COM</code> to your actual GitHub email</li> </ul> </li> </ol>  <ol> <li> <p>Once finished, run the following to check your email and username: <code>git config --list</code></p> </li> <li> <p>If you had any issues, please check this documentation for more     details or reach out for help.</p> </li> <li> <p>Now you are ready to clone a repository!</p> </li> </ol>","title":"Guide for installing Git SCM"},{"location":"Guides/live_share/","text":"<p>Make sure you have installed the Live Share extension by going to the following link and clicking on \u201cInstall\u201d: </p>  <p>https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare</p>  <p></p> <p>You can read the documentation to learn more about Live Share and what it does too:</p>  <p>https://docs.microsoft.com/en-us/visualstudio/liveshare/</p>  <p>After installing Live Share, you can join a session with these steps:</p>","title":"Quickstart for Live Share"},{"location":"Guides/live_share/#1-click-on-the-join-url","text":"<p>Click the session URL the \u201chost\u201d sent you, which will open it up in a browser. When prompted, allow your browser to launch VS Code</p>","title":"1. Click on the Join url"},{"location":"Guides/live_share/#2-sign-in-to-github","text":"<p>Tip: This will only need be done once.</p>  <p>Click on the <code>Live Share</code> status bar item or press <code>Ctrl+Shift+P</code> / <code>Cmd+Shift+P</code> and select the <code>Live Share: Sign In With Browser</code> command. </p>","title":"2. Sign in to GitHub"},{"location":"Guides/live_share/#3-working-the-session","text":"<p>After you join, you\u2019ll be immediately presented with the file that the \u201chost\u201d has open, and can see their cursor and any edits they make.</p>","title":"3. Working the session"},{"location":"Guides/live_share/#4-snapping-windows","text":"<p>To make our editing session more efficient, it is highly recommended that after you join the live coding session, that you open a new window for VS Code and snap one window to the left and another to the right.</p> <p>The ideal layout should look something like the following:</p> <p></p> <ul> <li> <p>How to Snap windows on Mac</p> </li> <li> <p>How to Snap windows on PC</p> </li> </ul>","title":"4. Snapping windows"},{"location":"Guides/live_share/#optional-host-your-own-session","text":"<p>Click the \u201clive share\u201d button to immediately start sharing your coding session.  An invitation link will automatically be copied to your clip board, you can invite anyone to join your session by sharing it. </p> <p>You can join your own collaboration session by clicking the link yourself. open it in any browser to join your session.</p>","title":"Optional: Host your own session"},{"location":"Guides/readme/","text":"<p>Below are step-by-step guides on getting started with the course. If you run into any issues, please ask on the GitHub discussion forums.</p>","title":"How-To Guides"},{"location":"Guides/readme/#committing-code-to-github-in-vs-code","text":"","title":"Committing code to GitHub in VS Code"},{"location":"Guides/readme/#creating-a-repository-in-github","text":"","title":"Creating a Repository in GitHub"},{"location":"Guides/readme/#github-sign-up","text":"","title":"GitHub Sign-Up"},{"location":"Guides/readme/#git-clone-in-vs-code","text":"","title":"Git Clone in VS Code"},{"location":"Guides/readme/#git-forking-in-vs-code","text":"","title":"Git Forking in VS Code"},{"location":"Guides/readme/#git-clone-in-vs-code_1","text":"","title":"Git Clone in VS Code"},{"location":"Guides/readme/#posting-a-thinking-cap","text":"","title":"Posting a Thinking Cap"},{"location":"Guides/readme/#working-with-remote-updates-in-vs-code","text":"","title":"Working with Remote Updates in VS Code"},{"location":"Guides/submit/","text":"","title":"How to Submit Lab Assignment pages:"},{"location":"Guides/submit/#go-to-the-discussion-board","text":"<p>https://github.com/albertkun/21S-ASIAAM-191A/discussions</p>","title":"Go to the Discussion board"},{"location":"Guides/submit/#click-on-the-assignment-you-are-submitting","text":"<p></p>","title":"Click on the assignment you are submitting"},{"location":"Guides/submit/#paste-the-link-as-a-comment-and-reply","text":"<p></p>","title":"Paste the link as a comment and reply"},{"location":"Guides/thinking_caps/","text":"","title":"How to Submit a Thinking Cap Discussion"},{"location":"Guides/thinking_caps/#part-one-posting-your-own-discussion","text":"<p>Due at 12am PST on Mondays 1. Make sure you are signed into your GitHub account.  2. Go to the course repository 3. Click on \u201cDiscussions\u201c 4. Click on \u201cNew Discussion\u201d  5. Add a title and click on \u201cCategory\u201c 6. Choose the week you are submitting for, in this case it will be Week 1: 7. Respond to the prompt for the week. 8. Click on \u201cStart Discussion\u201c 9. The first part of assignment is now complete! 10. You can proceed to Step #12 if you click on the Week you are on: </p>","title":"Part One: Posting your own discussion"},{"location":"Guides/thinking_caps/#part-2-responding-to-discussions","text":"<ol> <li>Go to the discussion page on the GitHub repository</li> <li>Click on the week you are responding for, in this case Week 1 </li> <li>Try to look for student posts with no replies. </li> <li>Click on the discussion count or the discussion </li> <li>Type a thoughtful reply and click \u201cComment\u201d.</li> <li>Repeat Steps #12 - #15 for another student.</li> <li>Congratulations on finishing the assignment!</li> </ol>","title":"Part 2: Responding to discussions"},{"location":"week_01/1_pre_lab_1/","text":"<p>Pre-labs consist of the following:</p> <ul> <li>Checking if your applications and/or data is ready for the labs.</li> <li>Short readings that provide additional technical information or more background about the lab.</li> </ul>","title":"Pre-Lab: Week 1"},{"location":"week_01/1_pre_lab_1/#due-before-lab-1-on-04012021","text":"<p>Please have this completed before the lab:</p> <ol> <li>Download and install QGIS version 3.14 or higher to your computer.</li> <li>Download and install Git SCM</li> <li>Download and install VS Code </li> <li>Sign-up with a GitHub account</li> <li>Read the introduction pages 1-3 of Hands On Data Viz.</li> </ol> <p>I have provided these guides to help on: 1. How to sign-up for GitHub 2. How to install GitSCM</p> <p>If you have any further trouble with these steps, be sure reach out to me albertkun@idre.ucla.edu before the lab session.</p>","title":"Due before Lab #1 on 04/01/2021:"},{"location":"week_01/2_thinking_cap_1/","text":"","title":"Thinking cap #1"},{"location":"week_01/2_thinking_cap_1/#prompt-what-do-you-think-are-problems-with-the-way-we-use-data-and-gis","text":"","title":"Prompt: What do you think are problems with the way we use data and GIS?"},{"location":"week_01/2_thinking_cap_1/#1-respond-to-the-prompt-on-github","text":"<ul> <li>3 to 5 sentences minimum</li> <li>Feel free to include links and images</li> </ul>","title":"1. Respond to the prompt on GitHub"},{"location":"week_01/2_thinking_cap_1/#2-find-2-other-discussion-posts-and-comment-on-them","text":"<ul> <li>Try to respond to students posts with no replies.</li> </ul>","title":"2. Find 2 other discussion posts and comment on them."},{"location":"week_01/2_thinking_cap_1/#need-a-refresher-on-how-to-complete-this-assignment","text":"<p>How to submit thinking caps</p>","title":"Need a refresher on how to complete this assignment?"},{"location":"week_01/3_group_project/","text":"<ol> <li>Have one person create a new repo for the group and invite everyone as collaborators.  - Guide on how to create a new repo and invite </li> <li>Add a <code>readme.md</code> to the repository that describes the following:    - What social problem is being addressed, - The local community or non-profit that is being empowered by your application    - What problems you think may arise in developing this application (both technical and ethical). <p>Note: This is your group\u2019s introduction to the world, make sure you use Markdown formatting to style your content properly.  </p>  </li> <li>Add your group name and repo link to the Google Sheet here:  https://docs.google.com/spreadsheets/d/1B5QTtB3iDFuOXT3z6kv1Dwr1eNku9AeVAHF55YEZXFs/edit#gid=0 </li> </ol> <p>Extra Credit: Reach out to a non-profit organization that your crowd-sourced mapping application could help support and incorporate them into the write-up.</p>","title":"Due Thursday 4/8:"},{"location":"week_01/a_optional_gis/","text":"<p>What is GIS? Depending on who you ask, GIS has two meanings:</p> <p>Geographic Information System typically refers to applications and software that is used to create spatial data and to investigate spatial relationships between that data.</p> <p>Geographic Information Science is the framework we use to ask questions about the spatial relationship between data.</p> <p>For example, predicting the effects of climate change (rising sea-levels) on low laying areas (elevation) would be an application of Geographic Information Science, while the software to do the predictions would be an example of a Geographic Information System.</p> <p>In short:</p> <p></p>","title":"Introduction to GIS"},{"location":"week_01/a_optional_gis/#data-types","text":"<p>There are two key distinction between data types, spatial or non-spatial data.</p> <p>Spatial data is data that already contains geographic information.</p> <p>Common file types are the following:</p> <ul> <li> <p>Shapefiles: .zip (these are made up of 5 files, and the .shp is     commonly used to identify them)</p> </li> <li> <p>KML files: .kml, .kmz</p> </li> <li> <p>GeoJSON files: .geojson</p> </li> <li> <p>JPG files: .jpg*</p> </li> </ul> <p>Non-spatial data is data that has no geographic information.</p> <p>Common non-spatial data are the following:</p> <ul> <li> <p>Excel Spreadsheets: .xlsx, .xls</p> </li> <li> <p>Comma/Table Separated Value files: .csv, .tsv</p> </li> <li> <p>JSON files: .json</p> </li> <li> <p>dBase database file: .dbf</p> </li> </ul> <p>When non-spatial data has geographic attributes, like zipcodes, addresses, city names, or even latitude/longitude coordinates it can be turned into spatial data. The distinction is that non-spatial data will only show up as tables in GIS applications.</p> <p>On the other hand, spatial data that has data attributes can be turned into a non-spatial data type by saving/exporting its data as tables. The following graphic summarizes this relationship:</p> <p></p>","title":"Data Types"},{"location":"week_01/a_optional_gis/#spatial-data-formats","text":"<p>There are several data spatial data models that you may encounter as you work with geo data. Geodata formats are commonly divided into two types, vector data or a raster data. In GIS, discrete data means that the data has a fixed location. Conversly, continuous data does not have well defined locations, a common example is elevation, where shorelines differ depending on the time of day. The graphic below shows how vector data and raster data formats can represent continuous or discrete data:</p> <p> Spatial Data Types (Source: Michele Tobias, UC Davis)</p> <p>The graphic also illustrates how certain vector data is often better suited for discrete data, while raster data is often better used for continuous data. Let\u2019s go into a little more detail about each!</p>","title":"Spatial Data Formats"},{"location":"week_01/a_optional_gis/#vector-data","text":"<p>Vector data represents discrete objects in the real world with points, lines, and polygons in the dataset.</p> <p>If you were to draw a map to your house for a friend, you would typically use vector data - roads would be lines, a shopping center included as an important landmark might be a rectangle of sorts, and your house might be a point (perhaps represented by a star or a house icon).</p>","title":"Vector Data"},{"location":"week_01/a_optional_gis/#raster-data","text":"<p>Raster data represents continuous fields or discrete objects on a grid, storing measurements or category names in each cell of the grid.</p> <p>Digital photos are raster data you are already familiar with. If you zoom in far enough on a digital photo, you'll see that a photo is made up of pixels, which appear as colored squares. Pixels are cells in a regular grid and each contains the digital code that corresponds to the color that should be displayed there.</p> <p>You may be surprised to see jpgs listed as a data type that you may have thought to be non-spatial, but satellite imagery is commonly stored in photo formats.</p>","title":"Raster Data"},{"location":"week_01/a_optional_gis/#gis-and-social-sciences","text":"<p>Now that we have a good understanding of geospatial data, we can explore the GIS connection to the social sciences.</p> <p>Geography is divided into physical geography (natural systems) and human geography (human-made systems). The social sciences sit within human-made systems and the data here is often captured in specific units. Such as number of people living in a specific city or the language spoken in a country. Thusly, most of the data we will encounter will be discrete.</p> <p>Another common example is the following election result map which shows the number of people from each state that voted for either Biden or Trump in the 2020 general election.</p> <p></p> <p>Source: New York Times, 2020</p> <p>The states themselves are the boundaries, even though the data is collected at smaller levels.</p> <p>How is that possible? The answer is geographical hierarchy.</p>","title":"GIS and Social Sciences"},{"location":"week_01/a_optional_gis/#geographic-hierarchy","text":"<p>The first law of Geography (and perhaps only) is \u201ceverything is related to everything else, but nearer things are more related than distant things.\u201d When thinking about human data, there are many different units, countries, states, cities, and even households. Whenever this data is being summarized to larger geographies, as long as the smaller boundaries do not overlap then you can do so. However, this does not mean it is always safe to do so, why?</p> <p>Keeping the first law of geography in mind, when you summarize smaller data to larger geographies (i.e. going from cities to a state), the nearer things become less related because they are summarized to a larger geographic relation. Let\u2019s return to the election map above, but break it down into counties to see how the summing of the data changed spatial relationships.</p> <p></p> <p>Source: USA Today, 2020</p> <p>How does this map compare to the previous one?</p> <p></p> <p>For one thing, you can see that a state like Nevada is not completely blue and has quite a bit of Republican voters. When a whole state is considered \u201cdemocrat\u201d or blue, such types of simplifications can only occur when data from the counties is summarized upwards to the state level.</p> <p>Below is an example of how the United States Census Bureau\u2019s uses hierarchal geography:</p> <p></p> <p>The Federal Information Processing Standards (FIPS) codes represents this in numerical format:</p> <p>[STATE] + [COUNTY] + [CENSUS TRACT] + [CENSUS BLOCK GROUP]\\ For example:\\ 06 + 037 + 2653 + 01 or 06037265301, which is UCLA\u2019s census tract.</p> <p>When data is organized in this way it can readily summarized, since the smaller units make up the larger units. For example, demographic information that is collected at the smaller Census Tract level can be easily aggregated to answer questions at the city or state level. Questions such as \u201chow many Asians are there in California?\u201d are readily answerable. While voting data is collected at the voter precinct level, which is a different shape all together, the summarization can occur at the state level because all the precincts fell within a particular state. If you were to combine the voting data with a bigger geography that causes boundaries to overlap, then data will be double counted and will cause problems (and headaches!)</p> <p>Now that we have a better understanding of geospatial datasets, how it relates to the social sciences, and some of the problems associated with them, we can finally start to utilize spatial data.</p> <p></p>","title":"Geographic Hierarchy"},{"location":"week_01/a_optional_gis/#crowd-sourced-data","text":"<p>Throughout the quarter we will be leveraging crowd-sourced data from others and/or community members. If you have a non-profit or political campaign in mind for the final project, then your data will be coming from those stakeholders. For the purposes of this lab we will be using the pre-course survey.</p>","title":"Crowd-Sourced Data"},{"location":"week_01/a_optional_gis/#other-data-sources","text":"<p>Most data that is not crowdsourced, can be found through government data sources, news organizations, and research groups. You can even think about exploring actions like submitting California Public Records Act (PRA) requests to get data when it is inacessible. But all of these have caveats when it comes to who\u2019s story is being told and reflect some level of biases from data collection. This is why we are choosing to focus on how to map crowdsource data for this class.</p>","title":"Other data sources"},{"location":"week_01/readme/","text":"","title":"Week 1 - GIS, Data, and Ethics"},{"location":"week_01/readme/#lecture","text":"","title":"Lecture"},{"location":"week_01/readme/#introducing-the-course-gis-data-and-ethics","text":"<p>Charting the course for the class and how it relates to GIS, data, and ethics.</p> <p>Note: Slides will be made available after the lecture.</p> <p>Lecture 1 Slides</p> <p>Lecture 1 Recording</p>","title":"Introducing the course, GIS, data, and ethics"},{"location":"week_01/readme/#lab","text":"","title":"Lab"},{"location":"week_01/readme/#giting-started-with-spatial-data-sets","text":"<p>Lab 1 Slides</p> <p>This lab will introduce GitHub and QGIS.</p>","title":"GITing started with Spatial Data Sets"},{"location":"week_01/readme/#assignments","text":"<p>Unless specified otherwise, all assignments are due at the beginning of class. Late assignments will be given half credit up until a week.</p>","title":"Assignments"},{"location":"week_01/readme/#due-thursday-41","text":"<ul> <li>","title":"Due Thursday 4/1:"},{"location":"week_01/readme/#pre-lab-1","text":"Install the software required for the course (QGIS, Git SCM, VS Code) and read pages 1 and 2 and 3 of \u201cHands on Data Viz\u201d.</li> </ul> <p>Please check the guides for help on: 1. How to sign-up for GitHub 2. How to install GitSCM</p> <p>Click for more pre-lab information.</p>","title":"Pre-lab #1"},{"location":"week_01/readme/#due-monday-45-at-12am-pst","text":"<ul> <li>","title":"Due  Monday 4/5 at 12am PST:"},{"location":"week_01/readme/#thinking-cap-post","text":"<p>What are problems with the way we use data and GIS?</p>  </li> </ul> <p>Respond to the prompt above on the course GitHub discussion board.  - 3 to 5 sentences minimum  - Feel free to include links and images</p> <p>Need a refresher on how to complete this assignment?</p> <p>See how to submit thinking caps, part 1.</p>","title":"\u201cThinking Cap\u201d post"},{"location":"week_01/readme/#due-next-tuesday-46","text":"<ul> <li>","title":"Due next Tuesday 4/6:"},{"location":"week_01/readme/#comment-on-2-posts","text":"Leave a reply on the posts of two other students, reflecting on what you think of their discussion post. You can ask a thoughtful follow-up question, express similar experiences, and share resources.</li> </ul> <p>See how to submit thinking caps, part 2</p> <ul> <li>","title":"Comment on 2 posts"},{"location":"week_01/readme/#finish-the-weekly-reading","text":"</li> </ul>","title":"Finish the weekly reading"},{"location":"week_01/readme/#weekly-reading","text":"<p>J. W. Crampton and J. Krygier (2010) \u201cAn Introduction to Critical Cartography\u201d. https://www.researchgate.net/publication/241435510_An_Introduction_to_Critical_Cartography</p>  <p>This 15-page article summarizes critical cartography by introducing ethics and modern mapmaking technologies.</p> <p>Local PDF</p>","title":"Weekly Reading:"},{"location":"week_01/readme/#optional-readings-and-resources","text":"<p>Introduction to GIS</p>","title":"Optional Readings and Resources"},{"location":"week_01/readme/#definitions","text":"<p>GIS - Geographic Information Systems or Science</p> <p>Ethics - Branch of philosphy concerned about how and why we do certain actions.</p> <p>Civil Society - The sector of society concerned focused with non-profits and non-government. This is in opposition to the other two sectors of society, the private sector and the government sector.</p> <p>Data - Observed units of information.</p> <p>Qualitative data - Properties are descriptive and are not numerical. </p> <p>Quantitative data - Properties that are numerical.</p> <p>Cartography - The practice of making maps, includes paper maps and digital mapmaking.</p> <p>Critical Data Studies - More to the data than just numbers, data should be approached with skepticism and the collection of data is a set of biases</p> <p>Repository \u2013 Place where code exists, also known as a <code>repo</code>.</p> <p>Open Source - Programs and applications where the source is freely available for people to use and replicate.</p> <p>Closed Source - Programs where the source is not made available for all.</p> <p>Open data\u2013 When governments, companies, and non-profits provide data for transparency</p> <p>Humanitarian data \u2013 When non-profits and organizations ask for data from volunteers and locals</p> <p>Crowdsource data \u2013 A sourcing model in which individuals or organizations obtain goods or services, including ideas, voting, micro-tasks and finances, from a large, relatively open and often rapidly evolving group of participants.</p> <p>Participatory data \u2013 Puts the community at the forefront of the data, amplifies and empowers local voices</p> <p>Cloning a repo - Copying another repo to your own location (can be remote or local).</p> <p>Forking a repo - Copying another repo, but it is still connected to the origin repo</p> <p>Class repo \u2013 Class content and the discussion board. If you are reading this, you probably are on it!</p> <p>Lab assignment repo \u2013 Where lab assignments will be posted at the beginning of the week.</p> <p>Your lab assignment repo \u2013 A forked version of the  lab assignment repo, where you will be submitting assignments. The \u201cremote\u201d exists on GitHub and \u201clocal\u201d exists on your machine if you cloned it. </p> <p>Group Project repo \u2013 where you will be submitting your group work.</p>","title":"Definitions"},{"location":"week_01/Lab/Lab1_2/","text":"<ul> <li>Adding spatial data</li> <li>Exploring spatial data attributes</li> <li>Adding a field</li> <li>Symbolizing our map</li> <li>Filtering our fields</li> <li>Saving Our Map Layer for Web Mapping</li> <li>Adding non-spatial data</li> <li>Lab Questions</li> </ul>","title":"Lab 1.2 \u201cHello World!\u201d QGIS Bootcamp"},{"location":"week_01/Lab/Lab1_2/#adding-spatial-data","text":"<p>Important: Before starting this lab, you must have completed the pre-lab and part 1. This means you should have already installed QGIS and a local copy the lab.</p>  <ol> <li>Click on <code>Layer</code></li> </ol> <p></p> <ol> <li><code>Add Layer</code> <code>Add vector layer</code></li> </ol> <p></p> <ol> <li>Locate the file <code>**CA_Counties.shp**</code></li> </ol> <p></p> <ol> <li>Click <code>Add</code> to add it to your QGIS project.</li> </ol> <p></p> <ol> <li>Counties in California should now appear:</li> </ol> <p></p>","title":"Adding spatial data"},{"location":"week_01/Lab/Lab1_2/#exploring-spatial-data-attributes","text":"<ol> <li>In the <code>Layers</code> panel, right click on the layer     <code>**CA_Counties_TIGER2016**</code></li> </ol> <p></p> <ol> <li>Click on <code>Open Attribute Table</code></li> </ol> <p></p> <ol> <li>Now you can see the attributes of each of the spatial data shown in     the map:</li> </ol> <p></p> <ol> <li>You can click on the headers to sort, so let\u2019s find the most populous county in  California by scrolling to <code>**TOTAL_POP**</code> and clicking on it:</li> </ol> <p></p> <ol> <li>We can highlight the county by click on the number box with the     number 1 next to it:</li> </ol> <p></p> <p>Note: Shift + Click down to select multiple rows: </p> <ol> <li>Return to the map to see the most populated counties according to     the American Community Survey 2019 data in California highlighted:</li> </ol> <p></p> <ol> <li> <p>Clear your selection in the following ways:</p> <ol> <li>Clicking the deselect button in the general interface:</li> </ol> </li> </ol> <p></p> <ol> <li>Or the deselect button in the attribute table:</li> </ol> <p></p>","title":"Exploring spatial data attributes"},{"location":"week_01/Lab/Lab1_2/#adding-a-field","text":"<p>Since bigger areas are most likely to have more people, we need to factor that in to see where most people in the state are likely to be found. We will do a population density calculation, which is simply <code>number of people</code> divided by <code>total area.</code></p> <ol> <li>Click the <code>edit</code> tool to enable making changes:</li> </ol> <p></p> <ol> <li>Warning! When you are in <code>editor</code> mode you can click on any cell to     directly edit it:</li> </ol> <p></p> <ol> <li> <p>If you accidentally made edits, turn off editing mode by clicking     the pencil     again:</p> </li> <li> <p>Choose <code>Discard</code>:</p> </li> </ol> <p></p> <ol> <li>Next click the <code>Field Calculator</code> button:</li> </ol> <p></p> <ol> <li>The field calculator window will appear:</li> </ol> <p></p> <ol> <li>Click on <code>Output field name</code> and type in <code>AREA_SQ_KM</code> which will     be <code>Area in square kilometers</code>.</li> </ol> <p></p> <ol> <li>Click on field type and choose <code>Decimal Number (real)</code></li> </ol> <p></p> <ol> <li>In the Expression box type in the following:</li> </ol> <ul> <li><code>$area / 1000000</code></li> </ul> <p></p> <ol> <li>If correctly done, you can see the preview will show the value:</li> </ol> <p></p> <ol> <li>Click <code>OK</code>:</li> </ol> <p></p> <ol> <li>You can see our new field all the way on the right side:</li> </ol> <p></p> <ol> <li>Open the <code>Field Calculator</code> again and create a new field called     <code>POP_DENSIT</code> with <code>Decimal number (real)</code>:</li> </ol> <p></p> <ol> <li>Locate the search box, this place is helpful for creating     expressions.</li> </ol> <p></p> <ul> <li>In the search box type in <code>total_pop</code> and double click on the result:</li> </ul> <p></p> <ul> <li>Note: The help on the right side explains more detail about what is     being selected in the search box.</li> </ul>  <ol> <li> <p>Add a <code>/</code> for divide</p> </li> <li> <p>Search for <code>area_sq_km</code> and add it to our expression:</p> </li> </ol> <p></p> <ol> <li>The final expression should be:</li> </ol> <p><code>\"TOTAL_POP\" / \"AREA_SQ_KM\"</code></p> <p></p> <ol> <li>Check the preview:</li> </ol> <p></p> <ol> <li>Hit OK:</li> </ol> <p></p> <ol> <li>Check to see if the <code>POP \\ DENSIT</code> column is there:</li> </ol> <p></p> <ol> <li>If you have successfully calculated the population density for all     the counties in California, then click the <code>save</code> button to save our     edits:</li> </ol> <p></p> <ol> <li>Turn off the editing tool as we are done with it:</li> </ol> <p></p>","title":"Adding a field"},{"location":"week_01/Lab/Lab1_2/#symbolizing-our-map","text":"<ol> <li>Right click on our layer and go to <code>Properties</code>:</li> </ol> <p></p> <ol> <li>Click on <code>Symbology</code>:</li> </ol> <p></p> <ol> <li>From there, click on <code>Single Symbol</code> to change which data fields are     being used for map creation:</li> </ol> <p></p> <ol> <li>If we were working with qualitative data fields then we would use     <code>categorized</code>, however we are going to be looking at our population     density data field, so we should use <code>graduated</code>:</li> </ol> <p></p> <ol> <li>Click the dropdown arrow near <code>Value</code> to see the list of fields:</li> </ol> <p></p> <ol> <li>Choose <code>POP_DENSIT</code>:</li> </ol> <p></p> <ol> <li>Change the <code>Mode</code> to <code>Equal Interval</code> which means that the breaks     between values are evenly spaced apart (i.e. 0-5, 5-10,10-15):</li> </ol> <p></p> <ol> <li>You can click histogram to get a better sense of the data and which     statistical mode you should use (but since this is not a stats     class, I won\u2019t spend much more time on this):</li> </ol> <p></p> <ol> <li>You can also change the number of <code>classes</code> (or breaks) by clicking     here:</li> </ol> <p></p> <ol> <li> <p>Click <code>OK</code> to apply our changes to the map:</p> </li> <li> <p>You can change the colors by clicking on <code>Color ramp</code>:</p> </li> </ol> <p></p> <ol> <li>Or individually by right clicking the square colored boxes:</li> </ol> <p></p> <ol> <li>Choose <code>change color</code> and adjust the color wheel:</li> </ol> <p></p> <ol> <li>When satisfied with your changes click <code>OK</code> to close the dialogue box:</li> </ol> <p></p> <ol> <li>You map should look like the following:</li> </ol> <p></p> <ol> <li>Tip: You can quickly change any color by right clicking on the colored box to the left of any layer:</li> </ol> <p></p>","title":"Symbolizing our map"},{"location":"week_01/Lab/Lab1_2/#filtering-our-fields","text":"<ol> <li> <p>Let\u2019s do some advanced filtering to see places where more than 100,000 Asians live.</p> </li> <li> <p>Start by opening our attribute table again:</p> <ul> <li>Right click on our layer </li> <li>Click <code>Open Attribute Table</code>:</li> </ul> </li> </ol> <p></p> <ol> <li>Click the <code>Filter selection form</code>.</li> </ol> <p></p> <ol> <li>We are finding places with <code>Asians</code> so locate the <code>ASIAN_POP</code>     field:</li> </ol> <p></p> <ol> <li>Click the <code>Exclude field</code> button to change it:</li> </ol> <p></p> <ol> <li>We will make it <code>Greater than or Equal to</code>:</li> </ol> <p></p> <ol> <li>Then type in 100000:</li> </ol> <p></p> <ol> <li>Click on <code>Select Features</code></li> </ol> <p></p> <ol> <li>Click the lower right icon to return to the table view:</li> </ol> <p></p> <ol> <li>You can view only selected features by clicking here:</li> </ol> <p></p> <ol> <li>Then choosing <code>Show Selected Features</code></li> </ol> <p></p> <ol> <li>Close the table when done exploring by clicking the X:</li> </ol> <p></p> <ol> <li>Congrats! Now you have filtered some features.</li> </ol>","title":"Filtering our fields"},{"location":"week_01/Lab/Lab1_2/#saving-our-map-layer-for-web-mapping","text":"<ol> <li>With everything still selected, right click on the layer:</li> </ol> <p></p> <ol> <li> <p>Go to <code>Export</code> and then choose <code>Save Selected Features As\u2026</code>:     </p> </li> <li> <p>The ESRI shapefile is the default, but it is very hard to use in our     web applications because it is a proprietary data format..</p> </li> </ol> <p></p> <ol> <li>The preferred spatial format online is a GeoJSON file:</li> </ol> <p></p> <ol> <li>Click the <code>\u2026</code> next to <code>File Name</code> to find a nice new home for your GeoJSON file!</li> </ol> <p></p> <ol> <li>Your final box should look like this:</li> </ol> <ul> <li> <p>Format: GeoJSON</p> </li> <li> <p>File name: CA_counties_with_over_100k_Asians.geojson</p> </li> </ul> <p></p> <ol> <li>Congratulations! You have created your first <code>GeoJSON</code> file! We will revisit this file in next week\u2019s lab, so keep it safe and sound!</li> </ol>","title":"Saving Our Map Layer for Web Mapping"},{"location":"week_01/Lab/Lab1_2/#adding-non-spatial-data","text":"<ol> <li>You can also add CSV files by clicking <code>Layer</code></li> </ol> <p></p> <ol> <li>Click on <code>Add Layer</code> <code>Add Delimited Text Layer...</code></li> </ol> <p></p> <ol> <li>To the far right of <code>File Name</code>, click on the button with <code>\u2026</code>:</li> </ol> <p></p> <ol> <li>Locate the file for California Asian American Hate Crimes,     CA_AAHC_2021.csv and select it and choose <code>Open</code>:</li> </ol> <p></p> <ol> <li>Check to make sure <code>Point</code> coordinates and a coordinate reference     system exists:</li> </ol> <p></p> <ol> <li>Click <code>Add</code> and then <code>Close</code>:</li> </ol> <p></p> <ol> <li>The data points should now show up:</li> </ol> <p></p> <ol> <li> <p>Note that you will not be able to edit CSV files, you will need to     export them in a spatial data type format, such as shapefile or GeoJSON to do so.</p> </li> <li> <p>Congratulations on finishing the spatial data management QGIS bootcamp.</p> </li> </ol>","title":"Adding non-spatial data"},{"location":"week_01/Lab/Lab1_2/#lab-questions","text":"<p>Please take some time to think about the following questions, they may be helpful when you are posting your Thinking Cap response for this week.  </p> <ol> <li> <p>What changes did we make to the original data?</p> </li> <li> <p>How can the choices we made in changing the data be problematic?</p> </li> </ol>","title":"Lab Questions"},{"location":"week_01/Lab/readme/","text":"<ol> <li>Git down with GitHub    - Guide on Git Cloning    - Guide on Git Forking    - Guide on making a GitHub repository and adding team members</li> <li>\u201cHello World!\u201d \u2013 QGIS Bootcamp    - California Counties    - California Asian American Hate Crime Google Form     - Spreadsheet</li> <li>Group Project Time    - Link to spreadsheet    - Group Assignment #1</li> <li>Lab Assignment</li> </ol> <p>Before we dive into web development and coding for the rest of the quarter, we will begin with learning how to handle spatial data. Finding a political campaign or social issue to address is usually the first step and you will be doing that at the end of today\u2019s lab after finding your groups.</p> <p></p> <p>We are starting with data management because knowing how to use tools like QGIS to handle data will form the foundations of working with data that we will eventually be web mapping.</p>","title":"GITing started with Spatial Data Sets"},{"location":"week_01/Lab/readme/#lab-assignment","text":"","title":"Lab Assignment"},{"location":"week_01/Lab/readme/#due-thursday-48","text":"<ol> <li> <p>Create a new field using two fields in the <code>CA_Counties_2019.shp</code> data set or another data set of your choosing.</p> </li> <li> <p>Create a geojson named <code>lab1.geojson</code> and add it to your lab assignments repository.</p> </li> <li> <p>Create a new markdown file or edit the existing <code>lab1.md</code> to explain the following:    -  What fields you used    -  Why you used these fields    -  What problems could the data set have</p> </li> <li>Commit both <code>lab1.geojson</code> and <code>lab1.md</code> to your lab assignments repository.</li> <li>Fill out this form so I can associate you with your GitHub repo: https://forms.gle/J8kebeHEd5xbGaiRA</li> </ol>","title":"Due Thursday 4/8:"},{"location":"week_01/Lab/readme/#group-assignment-project-idea","text":"","title":"Group Assignment: Project Idea"},{"location":"week_01/Lab/readme/#due-thursday-48_1","text":"<ol> <li>Have one person create a new repo for the group. - Guide on how to create a new repo and invite </li> <li>Add a <code>readme.md</code> to the repository that describes the following:    - What social problem is being addressed, - The local community or non-profit that is being empowered by your application    - What problems you think may arise in developing this application (both technical and ethical). <p>Note: This is your group\u2019s introduction to the world, make sure you use Markdown formatting to style your content properly.  </p>  </li> <li>Add your group name and repo link to the Google Sheet here:  https://docs.google.com/spreadsheets/d/1B5QTtB3iDFuOXT3z6kv1Dwr1eNku9AeVAHF55YEZXFs/edit#gid=0 </li> </ol> <p>See a guide on how to create a new repo </p> <p>Extra Credit: Reach out to a non-profit organization that your crowd-sourced mapping application could help support and incorporate them into the write-up.</p>","title":"Due Thursday 4/8:"},{"location":"week_01/Materials/1_pre_lab_1/","text":"<p>Pre-labs consist of the following:</p> <ul> <li>Checking if your applications and/or data is ready for the labs.</li> <li>Short readings that provide additional technical information or more background about the lab.</li> </ul>","title":"Pre-Lab: Week 1"},{"location":"week_01/Materials/1_pre_lab_1/#due-before-lab-1-on-04012021","text":"<p>Please have this completed before the lab:</p> <ol> <li>Download and install QGIS version 3.14 or higher to your computer.</li> <li>Download and install Git SCM</li> <li>Download and install VS Code </li> <li>Sign-up with a GitHub account</li> <li>Read the introduction pages 1-3 of Hands On Data Viz.</li> </ol> <p>I have provided these guides to help on: 1. How to sign-up for GitHub 2. How to install GitSCM</p> <p>If you have any further trouble with these steps, be sure reach out to me albertkun@idre.ucla.edu before the lab session.</p>","title":"Due before Lab #1 on 04/01/2021:"},{"location":"week_01/Materials/2_thinking_cap_1/","text":"","title":"Thinking cap #1"},{"location":"week_01/Materials/2_thinking_cap_1/#prompt-what-do-you-think-are-problems-with-the-way-we-use-data-and-gis","text":"","title":"Prompt: What do you think are problems with the way we use data and GIS?"},{"location":"week_01/Materials/2_thinking_cap_1/#1-respond-to-the-prompt-on-github","text":"<ul> <li>3 to 5 sentences minimum</li> <li>Feel free to include links and images</li> </ul> <p>Reflect on what we covered this week in regards data and GIS. What problems do these technologies create? For whom is it problematic for? It may be helpful to review the slides or readings for the class.</p>","title":"1. Respond to the prompt on GitHub"},{"location":"week_01/Materials/2_thinking_cap_1/#2-find-2-other-discussion-posts-and-comment-on-them","text":"<ul> <li>Try to respond to students posts with no replies.</li> </ul>","title":"2. Find 2 other discussion posts and comment on them."},{"location":"week_01/Materials/2_thinking_cap_1/#need-a-refresher-on-how-to-complete-this-assignment","text":"<p>How to submit thinking caps</p>","title":"Need a refresher on how to complete this assignment?"},{"location":"week_01/Materials/a_optional_gis/","text":"<p>What is GIS? Depending on who you ask, GIS has two meanings:</p> <p>Geographic Information System typically refers to applications and software that is used to create spatial data and to investigate spatial relationships between that data.</p> <p>Geographic Information Science is the framework we use to ask questions about the spatial relationship between data.</p> <p>For example, predicting the effects of climate change (rising sea-levels) on low laying areas (elevation) would be an application of Geographic Information Science, while the software to do the predictions would be an example of a Geographic Information System.</p> <p>In short:</p> <p></p>","title":"Introduction to GIS"},{"location":"week_01/Materials/a_optional_gis/#data-types","text":"<p>There are two key distinction between data types, spatial or non-spatial data.</p> <p>Spatial data is data that already contains geographic information.</p> <p>Common file types are the following:</p> <ul> <li> <p>Shapefiles: .zip (these are made up of 5 files, and the .shp is     commonly used to identify them)</p> </li> <li> <p>KML files: .kml, .kmz</p> </li> <li> <p>GeoJSON files: .geojson</p> </li> <li> <p>JPG files: .jpg*</p> </li> </ul> <p>Non-spatial data is data that has no geographic information.</p> <p>Common non-spatial data are the following:</p> <ul> <li> <p>Excel Spreadsheets: .xlsx, .xls</p> </li> <li> <p>Comma/Table Separated Value files: .csv, .tsv</p> </li> <li> <p>JSON files: .json</p> </li> <li> <p>dBase database file: .dbf</p> </li> </ul> <p>When non-spatial data has geographic attributes, like zipcodes, addresses, city names, or even latitude/longitude coordinates it can be turned into spatial data. The distinction is that non-spatial data will only show up as tables in GIS applications.</p> <p>On the other hand, spatial data that has data attributes can be turned into a non-spatial data type by saving/exporting its data as tables. The following graphic summarizes this relationship:</p> <p></p>","title":"Data Types"},{"location":"week_01/Materials/a_optional_gis/#spatial-data-formats","text":"<p>There are several data spatial data models that you may encounter as you work with geo data. Geodata formats are commonly divided into two types, vector data or a raster data. In GIS, discrete data means that the data has a fixed location. Conversly, continuous data does not have well defined locations, a common example is elevation, where shorelines differ depending on the time of day. The graphic below shows how vector data and raster data formats can represent continuous or discrete data:</p> <p> Spatial Data Types (Source: Michele Tobias, UC Davis)</p> <p>The graphic also illustrates how certain vector data is often better suited for discrete data, while raster data is often better used for continuous data. Let\u2019s go into a little more detail about each!</p>","title":"Spatial Data Formats"},{"location":"week_01/Materials/a_optional_gis/#vector-data","text":"<p>Vector data represents discrete objects in the real world with points, lines, and polygons in the dataset.</p> <p>If you were to draw a map to your house for a friend, you would typically use vector data - roads would be lines, a shopping center included as an important landmark might be a rectangle of sorts, and your house might be a point (perhaps represented by a star or a house icon).</p>","title":"Vector Data"},{"location":"week_01/Materials/a_optional_gis/#raster-data","text":"<p>Raster data represents continuous fields or discrete objects on a grid, storing measurements or category names in each cell of the grid.</p> <p>Digital photos are raster data you are already familiar with. If you zoom in far enough on a digital photo, you'll see that a photo is made up of pixels, which appear as colored squares. Pixels are cells in a regular grid and each contains the digital code that corresponds to the color that should be displayed there.</p> <p>You may be surprised to see jpgs listed as a data type that you may have thought to be non-spatial, but satellite imagery is commonly stored in photo formats.</p>","title":"Raster Data"},{"location":"week_01/Materials/a_optional_gis/#gis-and-social-sciences","text":"<p>Now that we have a good understanding of geospatial data, we can explore the GIS connection to the social sciences.</p> <p>Geography is divided into physical geography (natural systems) and human geography (human-made systems). The social sciences sit within human-made systems and the data here is often captured in specific units. Such as number of people living in a specific city or the language spoken in a country. Thusly, most of the data we will encounter will be discrete.</p> <p>Another common example is the following election result map which shows the number of people from each state that voted for either Biden or Trump in the 2020 general election.</p> <p></p> <p>Source: New York Times, 2020</p> <p>The states themselves are the boundaries, even though the data is collected at smaller levels.</p> <p>How is that possible? The answer is geographical hierarchy.</p>","title":"GIS and Social Sciences"},{"location":"week_01/Materials/a_optional_gis/#geographic-hierarchy","text":"<p>The first law of Geography (and perhaps only) is \u201ceverything is related to everything else, but nearer things are more related than distant things.\u201d When thinking about human data, there are many different units, countries, states, cities, and even households. Whenever this data is being summarized to larger geographies, as long as the smaller boundaries do not overlap then you can do so. However, this does not mean it is always safe to do so, why?</p> <p>Keeping the first law of geography in mind, when you summarize smaller data to larger geographies (i.e. going from cities to a state), the nearer things become less related because they are summarized to a larger geographic relation. Let\u2019s return to the election map above, but break it down into counties to see how the summing of the data changed spatial relationships.</p> <p></p> <p>Source: USA Today, 2020</p> <p>How does this map compare to the previous one?</p> <p></p> <p>For one thing, you can see that a state like Nevada is not completely blue and has quite a bit of Republican voters. When a whole state is considered \u201cdemocrat\u201d or blue, such types of simplifications can only occur when data from the counties is summarized upwards to the state level.</p> <p>Below is an example of how the United States Census Bureau\u2019s uses hierarchal geography:</p> <p></p> <p>The Federal Information Processing Standards (FIPS) codes represents this in numerical format:</p> <p>[STATE] + [COUNTY] + [CENSUS TRACT] + [CENSUS BLOCK GROUP]\\ For example:\\ 06 + 037 + 2653 + 01 or 06037265301, which is UCLA\u2019s census tract.</p> <p>When data is organized in this way it can readily summarized, since the smaller units make up the larger units. For example, demographic information that is collected at the smaller Census Tract level can be easily aggregated to answer questions at the city or state level. Questions such as \u201chow many Asians are there in California?\u201d are readily answerable. While voting data is collected at the voter precinct level, which is a different shape all together, the summarization can occur at the state level because all the precincts fell within a particular state. If you were to combine the voting data with a bigger geography that causes boundaries to overlap, then data will be double counted and will cause problems (and headaches!)</p> <p>Now that we have a better understanding of geospatial datasets, how it relates to the social sciences, and some of the problems associated with them, we can finally start to utilize spatial data.</p> <p></p>","title":"Geographic Hierarchy"},{"location":"week_01/Materials/a_optional_gis/#crowd-sourced-data","text":"<p>Throughout the quarter we will be leveraging crowd-sourced data from others and/or community members. If you have a non-profit or political campaign in mind for the final project, then your data will be coming from those stakeholders. For the purposes of this lab we will be using the pre-course survey.</p>","title":"Crowd-Sourced Data"},{"location":"week_01/Materials/a_optional_gis/#other-data-sources","text":"<p>Most data that is not crowdsourced, can be found through government data sources, news organizations, and research groups. You can even think about exploring actions like submitting California Public Records Act (PRA) requests to get data when it is inacessible. But all of these have caveats when it comes to who\u2019s story is being told and reflect some level of biases from data collection. This is why we are choosing to focus on how to map crowdsource data for this class.</p>","title":"Other data sources"},{"location":"week_02/readme/","text":"","title":"Week 2 - Humanizing Technology"},{"location":"week_02/readme/#lecture","text":"<ul> <li>Critical Cartography and Civil Society</li> </ul>","title":"Lecture"},{"location":"week_02/readme/#visiting-voices-mariah-tso","text":"<p></p> <p>Mariah Tso is a Din\u00e9 woman, artist, and GIS Specialist for the Ralph J. Bunche Center and the Million Dollar Hoods Project. </p>","title":"Visiting Voices: Mariah Tso"},{"location":"week_02/readme/#lab","text":"<ul> <li>JavaScript FUNctions</li> </ul>","title":"Lab"},{"location":"week_02/Lab/extra/","text":"","title":"Extra"},{"location":"week_02/Lab/extra/#exploration","text":"<p>If you\u2019d rather use icons then a circular color, then try to see if you can implement this code, be sure to have a custom icon ready!</p>","title":"Exploration:"},{"location":"week_02/Lab/extra/#customizing-icons","text":"<pre><code>function createCustomIcon (feature, latlng) {\n  let myIcon = L.icon({\n    iconUrl: 'my-icon.png',\n    shadowUrl: 'my-icon.png',\n    iconSize:     [25, 25], // width and height of the image in pixels\n    shadowSize:   [35, 20], // width, height of optional shadow image\n    iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location\n    shadowAnchor: [12, 6],  // anchor point of the shadow. should be offset\n    popupAnchor:  [0, 0] // point from which the popup should open relative to the iconAnchor\n  })\n  return L.marker(latlng, { icon: myIcon })\n}\n</code></pre>  <p>The following code will turn your geojson from lab1 into a choropleth map: <pre><code>// this is a function to get the color, notice how the numbers are hard coded, who decides that?\nfunction getColor(d) {\n    return d &gt; 1000000 ? '#800026' :\n           d &gt; 500000  ? '#BD0026' :\n           d &gt; 200000   ? '#FEB24C' :\n           d &gt; 10000   ? '#FED976' :\n                      '#FFEDA0';\n}\n\n// this is the generation function for the style, notice it uses the getColor function\nfunction style(feature) {\n    return {\n        fillColor: getColor(feature.properties.TOTAL_POP),\n        weight: 2,\n        opacity: 1,\n        color: 'white',\n        dashArray: '3',\n        fillOpacity: 0.7\n    };\n}\n\nfetch(\"js/lab1.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(ca_counties =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(ca_counties, {\n            style: style\n        }).bindPopup(function (layer) {\n            return layer.feature.properties.name;\n        }).addTo(map);\n    })\n</code></pre> </p>","title":"Customizing Icons"},{"location":"week_02/Lab/readme/","text":"","title":"Lab 2: Hello World (of HTML, Javascript, CSS, and Leaflet mapping!)"},{"location":"week_02/Lab/readme/#objectives","text":"<ul> <li>Create a basic webpage </li> <li>Add a Leaflet map</li> <li>Add GeoJSON data to the map</li> <li>Create a GeoJSON online</li> </ul> <p>This lab will walk you through the process of creating a static web page in HTML with some additional style elements using CSS. Then you will be tasked to add a map using the Leaflet JS library and host it using GitHub pages.</p>  <p>Note: I highly recommend checking out the Leaflet  documentation. Looking at any documentation before choosing any software is important, because badly documented libraries can make tools difficult to use. </p>","title":"Objectives:"},{"location":"week_02/Lab/readme/#lets-get-vs-coding","text":"<p>Start up VS Code and open your Assignments repo: </p> <p>Remember to select the correct folder! </p> <p>Make sure Explorer is open in the activity bar by clicking on it:</p> <p></p> <p>Click on <code>Week_02</code> (1) and then the <code>new file</code> button (2):    </p>","title":"Let\u2019s get VS Coding!"},{"location":"week_02/Lab/readme/#html-oh-what-taggony","text":"<p>HTML is what makes up the house for websites to be able to  talk to the server. Everything in HTML is surrounded by tags which look like this: <code>&lt;tag&gt; Look Ma'! I'm in a tag! &lt;/tag&gt;</code></p>","title":"HTML?! Oh what <code>tag</code>gony!"},{"location":"week_02/Lab/readme/#21-attributes-in-tags","text":"<p>If we can only use tags, the web would be a pretty boring place. So in order to make each tag unique, we can add attributes to them. To do so, you add an <code>attribute=\"some value\"</code></p> <p>For example, we can name a tag something: <code>&lt;tag name=\"Albert\"&gt;&lt;/tag&gt;</code></p> <p>Wow, that\u2019s my name tag!</p>","title":"2.1 Attributes in tags"},{"location":"week_02/Lab/readme/#22-boilerplate-vs-template-code","text":"<p>In coding, boilerplate code is ready to use code that people can freely copy and use with no changes. Think of them as ready-to-eat microwave dinners. <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"/&gt;\n  &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>Template code refers to sample code that can be copied and pasted, but requires modifications in order for it to work.</p> <p>Here is our template code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with Leaflet&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n\n        &lt;!-- I'd add some style if here if I had any --&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            Hello World!\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n        &lt;!-- hint: majority of your lab assignment can go here     --&gt;\n\n        &lt;/div&gt;\n\n\n        &lt;div id=\"footer\"&gt;\nCopyright(2021)\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>   <p>What do you observe in the code?  1. How does this code differ from the boilerplate code? 2. Why should everything be enclosed in the <code>html</code> tag? 3. Do empty spaces matter in HTML? 4. What is a comment and how do you write one? 5. Is there a difference between the <code>class</code> and <code>id</code> attributes?</p>","title":"2.2 Boilerplate vs. Template Code"},{"location":"week_02/Lab/readme/#in-class-exercise-1","text":"<p>Let\u2019s fix our code so that it actually looks presentable. Look for the errors in the template code.</p> <p>Save the file and name it <code>index.html</code> and open it in Firefox.</p>","title":"In-Class Exercise #1"},{"location":"week_02/Lab/readme/#preview-our-file","text":"<p>Make sure you have the Live Server extension installed: https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</p> <p>Click on Go Live! </p> <p>Your default browser should automatically pop-up, if it is not Firefox, you will need to copy and paste the link over.</p> <p></p> <p>Alternatively: Right click on your <code>index.html</code> file and <code>reveal in file explorer</code>. Then, double click on the file.</p>","title":"Preview our file"},{"location":"week_02/Lab/readme/#cool-stylin-sheets","text":"<p>Let\u2019s add some Cascading Style Sheets (CSS) to visualize our page better.</p> <p>Insert the following code in the <code>&lt;head&gt;</code> right before the closing tag (i.e. <code>&lt;/head&gt;</code>):</p> <p><pre><code>&lt;style&gt;\n    html {\n        background-color: azure;\n    }\n&lt;/style&gt;\n</code></pre>  What happened to the page?</p> <p>That\u2019s cool! But this way of using CSS, called inline CSS, can make your HTML file long and cumbersome. So it\u2019s usually better to have a separate file for CSS and bring that whole file in as a linked source.</p>","title":"Cool Stylin\u2019 Sheets"},{"location":"week_02/Lab/readme/#adding-linked-css","text":"<p>Click the new folder button:</p> <p></p> <p>Highlight the <code>style</code> folder by clicking on it:</p> <p></p> <p>Then click on the <code>new file</code> button file:</p> <p></p> <p>Name the file <code>style.css</code>:</p> <p></p> <p>Double click to open the new file. Then copy and paste the following CSS:</p> <p><pre><code>html, body {\n    padding: 5px;\n }\n\n body {\n     display: grid;\n     grid-template-rows: .1fr .30fr .60fr .05fr;\n     grid-template-columns: 1fr;\n     grid-template-areas: \"header\" \"main\" \"map\"  \"footer\";\n     justify-content: center;\n }\n\n header {\n    grid-area: header;\n    display: grid;\n    grid-template-columns: .2fr .6fr .2fr;\n    justify-content: center;\n }\n\n.main {\n    display: grid;\n    grid-area: main;\n    background-color: aqua;\n}\n\n#map {\n    grid-area: map;\n    height: 40vh;\n}\n\n#footer {\n    grid-area: footer;\n}\n</code></pre>  Remember to save the <code>style.css</code>!</p> <p>Next go back to the <code>index.html</code> file and replace your entire <code>&lt;style&gt; &lt;/style&gt;</code> content and tags with this code: <pre><code>&lt;link rel=\"stylesheet\" href=\"style/style.css\"&gt;\n</code></pre> </p> <p>What this code does is that it tells the HTML file to use all of the css in the <code>href</code> attribute.</p>","title":"Adding linked CSS"},{"location":"week_02/Lab/readme/#note-you-can-have-as-many-external-references-as-youd-like-as-long-as-you-link-them-in-this-way","text":"<p>We will go into CSS in more detail later, but what you need to know is that CSS has <code>selectors</code> which are then followed by the styles in <code>{ }</code>.</p>","title":"Note: You can have as many external references as you\u2019d like, as long as you link them in this way."},{"location":"week_02/Lab/readme/#javascript","text":"<p>JavaScript makes sure our page knows how to function and react. There are different frameworks for JavaScript, like React.js and vue.js, but this class will be focusing on vanilla JavaScript with ES7+ standards. All JavaScript must be contained within a script tag. In our <code>&lt;head&gt;</code> tag, let\u2019s add a <code>&lt;script&gt;&lt;/script&gt;</code> tag.</p> <p>Sometimes it also becomes important to put JavaScript in the footer tag, why is that? Sometimes you need JavaScript functions to run after the body loads, so putting <code>&lt;script&gt;</code> after the <code>&lt;/body&gt;</code> becomes necessary. This will be relevant when we bring in Leaflet.js.</p>","title":"JavaScript"},{"location":"week_02/Lab/readme/#lets-a-variable-go","text":"<p>Remember how we had field types in QGIS? Like, double, float and string? In programming languages we call those \u201ctypes.\u201d With JavaScript, variables are automatically assigned types based on their declaration. We\u2019ll discuss more next week, but is a quick introducing the concept of variables and declarations.</p> <p>This is an example of a declaration: <pre><code>var day = 8;\nvar name = \"Albert\";\n</code></pre>  Here <code>day</code> is a number type and <code>name</code> is a string type. Each type has certain properties with them, for example you can add numbers together using something like <code>day + day</code>, but you adding strings will simply concatenate and not total them.</p> <p>Important note, that with JavaScript ES7, we no longer use <code>var</code>, but instead <code>let</code> and <code>const</code> to declare variables. They get declared in the same way:</p> <pre><code>let day = 8;\nconst name = \"Albert\";\n</code></pre>","title":"Let\u2019s a-(variable)-go!"},{"location":"week_02/Lab/readme/#let-vs-const-vs-var","text":"<p>What is the difference? </p> <ol> <li><code>let</code> declaration allows a variable to change</li> <li><code>const</code> means a variable is constant and will never change.</li> <li><code>var</code> can be both changed and never changed depending on where it was declared! VERY PROBLEMATIC!</li> </ol> <p>Because <code>var</code> can be changing (mutable) and unchanging at the same time, so it was broken off into two variable types, <code>let</code> and <code>const</code>. </p> <p>So, bye bye <code>var</code> and <code>LET</code> us welcome our new <code>CONST</code> variables to the programming world.</p> <p>To recap: NEVER USE <code>var</code> unless you have to code for old browsers.</p>","title":"Let vs Const vs Var"},{"location":"week_02/Lab/readme/#consolelog","text":"<p>By itself, our script tag does nothing. So, one VERY important JavaScript method that we should familarize ourself with is <code>console.log()</code>, because it allows us to test our code without things showing up in the webpage.</p> <p>Add the following script: <pre><code>&lt;script&gt;\n    console.log('Hello Asian Am 191! :)');\n&lt;/script&gt;\n</code></pre> </p>","title":"Console.log()"},{"location":"week_02/Lab/readme/#nothing-happened-what","text":"<p>Actually, you are about to unlock your full web developer potential! </p> <p>In Firefox, right click anywhere on the page and the click <code>Inspect Element</code>:  This opens the <code>Developer Toolbar</code>!! You can find it by going to the Menu and going to <code>Web Developer</code> and then <code>Web Developer Tools</code>.</p> <p>Click on the Console button:</p> <p></p> <p>Yay! Our message is there!</p> <p></p>","title":"Nothing happened?! What!?"},{"location":"week_02/Lab/readme/#linking-to-another-javascript-file","text":"<p>Similar to the CSS files, we can move the JavaScript file into its own folder to avoid cluttering the HTML file. Importing libraries is the main way we level up our webpage.</p> <p>BUT!!! Instead of <code>&lt;link&gt;</code> we use the <code>&lt;script&gt;</code> tag:</p> <pre><code> &lt;script src=\"YOUR_SCRIPT_NAME.js\"&gt;&lt;/script&gt; \n</code></pre>  <p>The <code>src</code> attribute is location of your file.</p>","title":"Linking to another JavaScript file"},{"location":"week_02/Lab/readme/#in-class-exercise-2","text":"","title":"In-class Exercise #2"},{"location":"week_02/Lab/readme/#task","text":"<ul> <li>Create a new folder called <code>js</code></li> <li>Add our script in there</li> <li>Get our message to show up in the console </li> </ul>","title":"Task:"},{"location":"week_02/Lab/readme/#hello-leaflet-finally","text":"<p>OK, why did we do ALL of that? Well, when we use Leaflet, we actually need to bring in Leaflet\u2019s external CSS and JavaScript files!</p> <p>So, in our header, let\u2019s add the following: <pre><code>&lt;!-- Leaflet's css--&gt;\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n&lt;!-- Leaflet's JavaScript--&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n</code></pre> </p> <p>Now, let\u2019s go ahead and add a container for our map. </p> <p>After <code>&lt;div id=\"main\"&gt;&lt;/div&gt;</code> add a new <code>&lt;div&gt;&lt;/div&gt;</code> tag, and give it an ID attribute of \u201cmap\u201d:</p> <pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n</code></pre>  <p>With our container ready to go, open up the JavaScript file again and add the following Leaflet code template:</p> <pre><code>// JavaScript const variable declaration\nconst map = L.map('map').setView([34.0709, -118.444], 15);\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I work in ')\n        .openPopup();\n</code></pre>","title":"Hello Leaflet\u2026 Finally.."},{"location":"week_02/Lab/readme/#class-exercise-3-adding-more-markers","text":"<ul> <li>Looking at the code above a little bit, we can see some latitude/longitude pairs. Copy the marker code add more markers of your choosing. Note: Be sure give the marker variable a new name, like <code>marker2</code>.  </li> <li>To find latitude/longitude of coordinates, please use this website:</li> <li> <p>https://www.latlong.net/</p> </li> <li> <p>Optional: Not happy with the basemap? See if you can switch the basemap out by visiting here: </p> </li> <li>https://leaflet-extras.github.io/leaflet-providers/preview/</li> </ul>","title":"Class Exercise #3 - Adding more markers"},{"location":"week_02/Lab/readme/#using-github-pages","text":"<p>Save and commit your project to GitHub.</p> <p>Then visit your repository link on GitHub.</p> <p>Click on Settings: </p> <p>Scroll down to \u201cGitHub pages\u201d and under source click here:  </p> <p>Click on the \u201cmain\u201d branch: </p> <p>Choose \u201croot\u201d: </p> <p>Click on Save: </p> <p>Copy the link and put it in your <code>readme.md</code> file in the <code>week 2</code> folder. </p> <p>You can see the <code>html</code> file if you go to  <code>https://YOUR_GITHUB_ACCOUNT.github.io/21S-ASIAAM-191A-Assignments/Week_02/index.html</code></p>","title":"Using GitHub Pages"},{"location":"week_02/Lab/readme/#adding-a-geojson-file","text":"<p>Copy <code>lab1.geojson</code> from last week into this lab\u2019s folder. If you changed the name of it, please use  your filename to follow along or rename the file to lab1.geojson.</p>","title":"Adding a GeoJSON file"},{"location":"week_02/Lab/readme/#fetch-and-then","text":"<p>We will use the JavaScript Fetch API to get our geojson file and then add it to our map. In JavaScript whenever you see a <code>.</code> after a parenthesis, it means you are chaining a command to follow it. In this case we are chaining a <code>then</code> method. In the <code>then</code> method we will have a </p> <p><pre><code>fetch(\"js/lab1.geojson\")\n    .then(response =&gt; {\n        return response.json();\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data).addTo(map)\n    });\n</code></pre>  The map should now have a blue tint over it and you cannot interact with it. Not really useful.</p> <p>Add the basic Leaflet method for a geojson: <pre><code>// the leaflet method for adding a geojson\nL.geoJSON(data, {\n    style: function (feature) {\n        return {color: 'red'};\n    }\n}).bindPopup(function (layer) {\n    return layer.feature.properties.name;\n}).addTo(map);\n</code></pre> </p> <p>The completed <code>fetch</code> code should look like this: <pre><code>fetch(\"js/lab1.geojson\")\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n                        // the leaflet method for adding a geojson\n            L.geoJSON(data, {\n                style: function (feature) {\n                    return {color: 'red'};\n                }\n            }).bindPopup(function (layer) {\n                return layer.feature.properties.name;\n            }).addTo(map);\n        });\n</code></pre>  Notice now that when you click on the map, the name of the counties show up.</p>","title":"FETCH and THEN"},{"location":"week_02/Lab/readme/#the-power-of-web-mapping","text":"<p>The boundary that we added from last week doesn\u2019t really seem to add much. Let\u2019s put to practice what web development and GIS can do for power.</p> <p>Head over to this website: http://www.geojson.io/</p> <p>Click on the marker tool:</p> <p></p> <p>Click on a location of interest to you:</p> <p></p> <p>Add a data column:</p> <p></p> <p>Call it place and click \u201cOK\u201d:</p> <p></p> <p>Click inside the place column</p> <p></p> <p>Type in a description for the place, in this case I called it \u201chome\u201d.</p> <p></p> <p>Zoom out: </p> <p>Click the edit button:</p> <p></p> <p>Click the move the marker to the adjust the location:</p> <p></p> <p>Save your edit:</p> <p></p> <p>Repeat these steps until you have a few points.</p> <p>Add another column called \u201ccolor\u201d, to put some color to your map later.</p> <p></p> <p>Save your file:</p> <p></p> <p>Click geoJSON:</p> <p></p> <p>Download the file to your computer:</p> <p></p> <p>Copy the file into your project folder:</p> <p></p> <p>Change <code>lab1.geojson</code> to <code>map.geojson</code> (the name of the file we downloaded) in the <code>fetch</code> code:</p> <p><pre><code>fetch(\"js/map.geojson\")\n    .then(response =&gt; {\n        return response.json()\n    })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n        L.geoJSON(data, myLayerOptions)\n        .bindPopup(function (layer) {\n            return layer.feature.properties.place;\n        }).addTo(map);\n    })\n</code></pre>  Bam! It updated!</p> <p>Utilize our color property:</p> <p><pre><code>function customMarker (feature, latlng) {\n    return L.circleMarker(latlng, { color: feature.properties.color })\n  }\n\n  // create an options object\n  let myLayerOptions = {\n    pointToLayer: customMarker\n  }\n</code></pre>  Now think about how empowering it was for you to be able to add data to the map yourselves. Whether you were clicking random spots or trying to find your old favorite places to visit, the ability to mark things is a reclaiming of mapping for yourself. This sense of staking a claim is what I mean when I refer to \u201cempowering community voices\u201d.</p>","title":"The power of web mapping"},{"location":"week_02/Lab/readme/#final-template-code","text":"<p><code>index.html</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World with Leaflet&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;!-- I'd add some style if here if I had any --&gt;\n        &lt;link rel=\"stylesheet\" href=\"style/style.css\"&gt;\n        &lt;script&gt;\n            console.log('Hello Asian Am 191! :)')\n        &lt;/script&gt;\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"./js/lab1.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;header&gt;\n            My Map\n        &lt;/header&gt;\n\n        &lt;div class=\"main\"&gt;\n\n        &lt;/div&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"footer\"&gt;\n            Copyright(2021)\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n\n    &lt;script src=\"./js/init.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> </p> <p><code>init.js</code> <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\n// Leaflet tile layer, i.e. the base map\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n//JavaScript let variable declaration to create a marker\nlet marker = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Math Sciences 4328 aka the Technology Sandbox&lt;br&gt; is the lab where I work in ')\n        // .openPopup();\n\nfetch(\"js/map.geojson\")\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        // Basic Leaflet method to add GeoJSON data\n                        // the leaflet method for adding a geojson\n            L.geoJSON(data, {\n                style: function (feature) {\n                    return {color: 'red'};\n                }\n            }).bindPopup(function (layer) {\n                return layer.feature.properties.place;\n            }).addTo(map);\n        });\n</code></pre> </p> <p><code>style/style.css</code> <pre><code>html, body {\n    padding: 5px;\n }\n\n body {\n     display: grid;\n     grid-template-rows: .1fr .30fr .60fr .05fr;\n     grid-template-columns: 1fr;\n     grid-template-areas: \"header\" \"main\" \"map\"  \"footer\";\n     justify-content: center;\n }\n\n header {\n    grid-area: header;\n    display: grid;\n    grid-template-columns: .2fr .6fr .2fr;\n    justify-content: center;\n }\n\n.main {\n    display: grid;\n    grid-area: main;\n    background-color: aqua;\n}\n\n#map {\n    grid-area: map;\n    height: 40vh;\n}\n\n#footer {\n    grid-area: footer;\n}\n</code></pre> </p>","title":"Final Template Code:"},{"location":"week_02/Lab/readme/#lab-assignment-map-portfolio","text":"","title":"Lab Assignment - Map Portfolio:"},{"location":"week_02/Lab/readme/#due-415","text":"<p>Time to put your skills to the test and create a home page for the individual maps that you will be making this quarter. Describe some of your interests and include a map with some markers. This is your portfolio, so feel free to delete or add anything. If you made multiple HTML pages, please link them all to the <code>index.html</code> using the <code>&lt;a href=\"\"&gt;&lt;/a&gt;</code> tag&gt;.</p> <p>Your map portfolio must contain the following:</p> <ul> <li>A <code>&lt;h1&gt;</code> tag for your title</li> <li>Add at least 2-3 markers to the map with a common theme, for example organizations you\u2019ve volunteered for or places you\u2019ve traveled.</li> <li>A <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> tag to create a title for your map. </li> <li>A <code>&lt;p&gt;</code> tag for a paragraph describing yourself and your goals as a critical digital map maker.</li> <li>Style CSS by changing the background color, font, or anything else.</li> <li>Use an ordered list <code>&lt;ol&gt;</code> tag and an unordered list <code>&lt;ul&gt;</code> tag to list things.</li> <li>Include an <code>&lt;img&gt;</code> tag with a photo of yourself or an avatar. Feel free to add other images too to give some flavor to your page, like food or desserts.</li> <li>Use the <code>&lt;a&gt;</code> tag to add a link to 2 other web pages.</li> <li>Set up GitHub pages for your repo</li> </ul>","title":"Due 4/15"},{"location":"week_02/Lab/readme/#submission","text":"<ul> <li>Commit and publish your file to your repo\u2019s GitHub pages</li> <li> <p>Find your <code>index.html</code> in the <code>Week_02</code> folder and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_02/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #2</p> </li> </ul>","title":"Submission:"},{"location":"week_02/Lab/readme/#extra-credit-any-of-these","text":"<ul> <li>Add another <code>geojson</code> (it can be <code>lab1.geojson</code> or anything else) to a completely different HTML page not <code>index.html</code>. (Be sure to link it to your <code>index.html</code> and describe what you are showing)</li> <li>Add some Leaflet features that we did not discuss in class.</li> <li>Check out the Extra or Leaflet documentation and try something there.</li> </ul>","title":"Extra Credit: (any of these)"},{"location":"week_02/Lab/readme/#html-resources-to-help-with-your-assignment","text":"<ul> <li> <p>Short MDN HTML Syntax (good recap):  https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started</p> </li> <li> <p>Long overview and explanation of HTML: https://geobgu.xyz/web-mapping2/html.html</p> </li> </ul>","title":"HTML Resources to help with your assignment:"},{"location":"week_02/Materials/group_assigment_2/","text":"","title":"Group Assignment #2: Memo"},{"location":"week_02/Materials/group_assigment_2/#due-thursday-422","text":"<p>Prepare a short memo (no more than two pages) for your project either using Google Docs or Microsoft Word. This document will be exchanged with other groups and form the basis of our survey testing. When finished, please upload the pdf to your repository.</p> <p>Include the following: - Background on the social issue/campaign being addressed, please cite sources where necessary - What the project hopes to achieve - Description on which communities will be empowered - At least 2 user stories from the perspective of community members - Ideas of questions to be included on the survey - Future plans on how the project could be used in the future to give ownership of the tool to the community</p> <p>See the following for an example template: - https://docs.google.com/document/d/1OWUUxebPNsqw4K97gznvTkGLEr6QDAbXWqX2BGvernI/edit?usp=sharing</p>","title":"Due Thursday 4/22"},{"location":"week_02/Materials/group_assigment_2/#submission","text":"<p>Respond to the discussion post link for Group Assignment #2, here:</p> <p>https://github.com/albertkun/21S-ASIAAM-191A/discussions/92</p>","title":"Submission:"},{"location":"week_02/Materials/lab_assignment/","text":"","title":"Lab Assignment - Map Portfolio:"},{"location":"week_02/Materials/lab_assignment/#due-415","text":"<p>Time to put your skills to the test and create a home page for the individual maps that you will be making this quarter. Describe some of your interests and include a map with some markers. This is your portfolio, so feel free to delete or add anything. If you made multiple HTML pages, please link them all to the <code>index.html</code> using the <code>&lt;a href=\"\"&gt;&lt;/a&gt;</code> tag&gt;.</p> <p>Your map portfolio must contain the following:</p> <ul> <li>A <code>&lt;h1&gt;</code> tag for your title</li> <li>Add at least 2-3 markers to the map with a common theme, for example organizations you\u2019ve volunteered for or places you\u2019ve traveled.</li> <li>A <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> tag to create a title for your map. </li> <li>A <code>&lt;p&gt;</code> tag for a paragraph describing yourself and your goals as a critical digital map maker.</li> <li>Style CSS by changing the background color, font, or anything else.</li> <li>Use an ordered list <code>&lt;ol&gt;</code> tag and an unordered list <code>&lt;ul&gt;</code> tag to list things.</li> <li>Include an <code>&lt;img&gt;</code> tag with a photo of yourself or an avatar. Feel free to add other images too to give some flavor to your page, like food or desserts.</li> <li>Use the <code>&lt;a&gt;</code> tag to add a link to 2 other web pages.</li> <li>Set up GitHub pages for your repo</li> </ul>","title":"Due 4/15"},{"location":"week_02/Materials/lab_assignment/#submission","text":"<ul> <li>Commit and publish your file to your repo\u2019s GitHub pages</li> <li> <p>Find your <code>index.html</code> in the <code>Week_02</code> folder and copy the URL. It should look something like this:</p> </li> <li> <p>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_02/index.html</p> </li> <li> <p>Paste your link as a comment in the Discussion forum for Lab Assignment #2</p> </li> </ul>","title":"Submission:"},{"location":"week_02/Materials/lab_assignment/#extra-credit-any-of-these","text":"<ul> <li>Add another <code>geojson</code> (it can be <code>lab1.geojson</code> or anything else) to a completely different HTML page not <code>index.html</code>. (Be sure to link it to your <code>index.html</code> and describe what you are showing)</li> <li>Add some Leaflet features that we did not discuss in class.</li> <li>Check out the Extra or Leaflet documentation and try something there.</li> </ul>","title":"Extra Credit: (any of these)"},{"location":"week_02/Materials/lab_assignment/#html-resources-to-help-with-your-assignment","text":"<ul> <li> <p>Short MDN HTML Syntax (good recap):  https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started</p> </li> <li> <p>Long overview and explanation of HTML: https://geobgu.xyz/web-mapping2/html.html</p> </li> </ul>","title":"HTML Resources to help with your assignment:"},{"location":"week_02/Materials/pre-lab/","text":"","title":"Pre-Lab: Week 2"},{"location":"week_02/Materials/pre-lab/#due-before-lab-2-on-04082021","text":"<ol> <li>Download and install FireFox<code>*</code>.</li> <li>Install the Live Share extension for VS Code.</li> <li><code>git pull upstream main</code> in assignment repo for week 2<ul> <li>See the update guide for more info</li> </ul> </li> <li>Familiarize yourself with Live Share<ul> <li>See the Live Share guide for more info</li> </ul> </li> <li>Read Hands On Data Viz - Edit and Host Code with GitHub</li> <li>Read The web and web standards</li> </ol>","title":"Due before Lab #2 on 04/08/2021:"},{"location":"week_02/Materials/pre-lab/#optional","text":"<p>Familiarize yourself with VS Code by: - Watching this intro video (5 minutes) - Skimming the User Interface documentation</p> <p><code>*</code> If you already use FireFox as your main browser, consider downloading FireFox Development Edition or Google Chrome, as it always good practice to have multiple browsers for testing. See this course reader appendix on troubleshooting as to why.</p>","title":"Optional:"},{"location":"week_03/readme/","text":"","title":"Week 3 - Open Source and Web Mapping"},{"location":"week_03/readme/#lecture","text":"<ul> <li>Lecture 3 Slides</li> <li>Discussion questions</li> </ul>","title":"Lecture"},{"location":"week_03/readme/#lab","text":"<ul> <li>Lab 3 Slides</li> <li>JavaScript FUNctions</li> </ul>","title":"Lab"},{"location":"week_03/readme/#assignments","text":"","title":"Assignments"},{"location":"week_03/readme/#due-thursday-415","text":"<ul> <li>Lab Assignment #2</li> <li>Submit using the discussion post!! </li> <li>Optional: Pre-lab Reading</li> </ul>","title":"Due Thursday 4/15:"},{"location":"week_03/readme/#due-monday-419-at-12pm-pst","text":"<ul> <li>Thinking Cap #3</li> <li>Optional Reading: </li> <li>https://handsondataviz.org/sketch.html</li> <li>https://handsondataviz.org/tool-factors.html</li> </ul>","title":"Due Monday 4/19 at 12pm PST:"},{"location":"week_03/readme/#due-thursday-422","text":"<ul> <li>Group Assignment #2</li> <li>Lab Assignment #3</li> </ul>","title":"Due Thursday 4/22:"},{"location":"week_03/Lab/readme/","text":"","title":"JavaScript FUNctions"},{"location":"week_03/Lab/readme/#objectives","text":"<ul> <li>Understand how JavaScript affects HTML and CSS</li> <li>Understand how JavaScript variable, function, methods work together </li> <li>Use JavaScript to add data to a map</li> <li>Add user interactivity with JavaScript functions</li> </ul>  <p>You can get the latest assignment by running in your assignments repository: <pre><code>git pull upstream main\n</code></pre> </p>","title":"Objectives:"},{"location":"week_03/Lab/readme/#returning-home-to-the-htmlcssjs-analogy","text":"<p>Recall from last week\u2019s reading that a webpage is like a house: - HTML is the scaffolding of the house - CSS is the paint, carpets, etc. that makes the house look nice  - JavaScript is the appliances that adds function to the house</p> <p>Today we will be focusing on the appliances.</p>","title":"Returning home to the HTML/CSS/JS analogy"},{"location":"week_03/Lab/readme/#picking-up-from-last-week","text":"<p>We will start this lab off with this Leaflet template code:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n\n        &lt;style&gt; #map{height:90vh}&lt;/style&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Where I currently am')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre> </p>","title":"Picking up from last week"},{"location":"week_03/Lab/readme/#what-is-lmap-and-ltile","text":"<p><code>L.map</code> is Leaflet\u2019s lingo for its own mapping Application Programming Interface (API). Every API has its own unique language to utilize it. To learn more about Leaflet\u2019s API visit here: https://leafletjs.com/reference-1.7.1.html</p>","title":"What is <code>L.map</code> and <code>L.tile</code>?"},{"location":"week_03/Lab/readme/#some-variable-definitions","text":"<p>Last week I talked about <code>let</code> and <code>const</code> and <code>var</code>, but what we really need to understand about variables is that they act like boxes where you can store or take information out of.  - <code>const</code> acts like a locked safe that will not let you put anything into it after you define it - <code>let</code> is like a regular box. -  <code>var</code> is <code>VARy</code> problematic because it can be both locked and unlocked </p> <p>Here are some of the types in JavaScript: <pre><code>//number\nlet box1 = 5;\nlet box2 = 5.0;\n\n//string\nlet box3 = 'five';\nlet box4 = \"five\";\n\n// string literal, uses backticks and ${variable} to bring in another variable\nlet box5 = `this is from box #4: ${box4}`;\n\n// array\nlet box6 = [1,2,3,4,5]; \n\n// object, stores variables together, can be of different types!\nlet box7 = {\"number\": 'five', \"value\":5};\n\n// boolean (true or false)\nlet box8 = true;\n\n// null value\nlet emptyBox;\n</code></pre> </p> <p>To declare a variable or give it a value you use the  <code>=</code> symbol, like so: <pre><code>let my_variable = \"exist!\";\n</code></pre> </p>  <p>Notes: - <code>let</code> is the type of variable - <code>my_variable</code> is the variable\u2019s name - <code>\"exist!\"</code> is the value for this variable - <code>;</code> defines the end of a line in JavaScript </p>  <p>Remember:  - Use <code>let</code> to define variables you want to change, - Use <code>const</code> to define unchangable variables</p> <p>Let\u2019s practice using variables in our <code>init.js</code> file.</p>  <p>js/init.js <pre><code>// original code\nconst map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Where I currently am')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre> </p>","title":"Some Variable Definitions"},{"location":"week_03/Lab/readme/#class-exercise-1","text":"<p>Replace the hard coded values of <code>const map = L.map('map').setView([34.0709, -118.444], 5);</code> with variables.</p>  <p>Bonus: Try to use an object.</p>   Answer <pre><code>// method 1\nlet zoomLevel = 5;\nconst mapCenter = [34.0709,-118.444];\n\nconst map = L.map('map').setView(mapCenter, zoomLevel);\n\n// Bonus:\n// let myMap = {'center': [34.0709,-118.444],'zoom':5}\n// const map = L.map('map').setView(myMap.center, myMap.zoom);\n</code></pre>    <p>Note: You cannot use spaces in variable definitions like <code>let my map;</code>, so stick with <code>camelCase</code>.</p>","title":"Class Exercise #1"},{"location":"week_03/Lab/readme/#think-about-the-benefits-of-having-the-variables-sitting-outside-like-that-is-it-easier-to-read-for-you-harder","text":"","title":"Think about the benefits of having the variables sitting outside like that, is it easier to read for you? Harder?"},{"location":"week_03/Lab/readme/#checking-our-dev-console","text":"<p>In VS Code, start Live Server.</p> <p>After Firefox runs, open the Console: - You can either right click anywhere on the page with the mouse and clicking on <code>Inspect</code> or press <code>F12</code> on the keyboard.</p> <p>Think of the Console as the Command Line/Terminal for your browser.</p> <ul> <li>In the console, type <code>zoomLevel</code> then press <code>Enter</code>. </li> <li>What gets outputted?</li> </ul> <p>Knowing how to check the console will help us test our <code>functions</code>.</p>","title":"Checking our Dev Console"},{"location":"week_03/Lab/readme/#time-for-functions","text":"<p>Programmers are often programming because they have to get something done, but a true programmer likes to automate (as well as copy and paste).</p> <p>Look at our <code>init.js</code> file after the line <code>//adding markers</code>:</p>  <p>js/init.js <pre><code>// original code\nconst map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// adding markers\nlet work = L.marker([34.0709, -118.444]).addTo(map)\n        .bindPopup('Where I work on campus')\n\nlet home = L.marker([37.7409, -122.484]).addTo(map)\n        .bindPopup('Where I currently am')\n\nlet random = L.marker([39.7409, -122.484]).addTo(map)\n        .bindPopup('Third Point')\n</code></pre> </p>  <p>We can automate the marker creation by creating a function like this:</p>  <p>js/init.js</p>  <pre><code>function addMarker(lat,lng,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(message)\n    return message\n}\n</code></pre>   <p>Notes: - <code>function</code> is the declaration of our function - <code>addMarker</code> is the name.  - <code>lat,lng,message</code> is the parameter, which are passed in to a function to be utilized. <code>Parameters</code> are optional, but parentheses <code>()</code> are not!! - <code>{</code> is the begining of the function. - Notice how the function accesses <code>lat</code>,<code>lng</code> in the <code>L.marker</code> and <code>message</code> in the <code>bindPopUp</code>.  - <code>return</code> tells the function to return a variable, it is also optional - <code>}</code> is the end of our function.</p>  <p>Note: Multiple parameters are seperated by a comma, <code>(lat,lng,message)</code> is 3 parameters. </p> <p>The <code>console.log</code> in the body will tell us if the function is working.</p> <p>Go ahead and check the console!</p> <p>WHAT?! Nothing has changed!</p>","title":"Time for FUNctions"},{"location":"week_03/Lab/readme/#using-functions","text":"<p>In order for a function to run, it needs to be \u201cplugged-in\u201d. This is called \u201cinvoking\u201d or \u201ccalling\u201d the function. When a function has no parameters, you can call it like so: <pre><code>    function_name()\n</code></pre> </p> <p>But since our function does have parameters (namely the <code>lat</code>,<code>lng</code>,and <code>message</code>), you must specify them. </p> <p>Add this to the end of our <code>init.js</code> file:</p>  <p>js/init.js <pre><code>    addMaker(37,-122,'you are awesome! you automated a marker function')\n</code></pre>  Important: The order of the parameters (<code>lat</code>,<code>lng</code>,<code>message</code>) is the SAME order that the function reads them!! Try switching <code>37</code> and <code>-122</code> to see what I mean.</p>  <p>Now your console should return the \u201cmessage\u201d AND you should see a new marker on the map!</p> <p>Inside <code>function</code> blocks you can create variables, change HTML, and do all sorts of things like play videos and even create games.</p>","title":"Using Functions"},{"location":"week_03/Lab/readme/#class-exercise-2-using-the-marker-function","text":"<p>Create your own marker function that does the following: - Utilizes at least <code>four parameters</code> - Declare a <code>new variable</code> inside the function  - <code>Returns</code> a value</p> <p>Use your function to create 3 markers with it.</p>  Answer <pre><code>    // create function\n    function addMarker(lat,lng,title,message){\n        console.log(message)\n        L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt;`)\n        return message\n    }\n\n    // use the function\n    addMarker(37,-122,'home','home land!')\n    addMarker(32,-118,'work','where i work land!')\n    addMarker(39,-119,'location 1','random location')\n    addMarker(36,-120,'location 2','another random location')\n</code></pre>   <p>If you finished early, try these extra challenges: - Try to style your pop-up with 2 attributes!</p>  Bonus Exercise - Create your own function  Create your own function that does the following: - Utilizes at least `two parameters` - Declare a `new variable` inside the function  - `Returns` a value   Bonus Answer <pre><code>    // create function\n    function addNumbers(value1,value2){\n        let result = value1 + value2\n        return result\n    }\n\n    // use the function\n    addNumbers(1,10)   // result: 11\n</code></pre>","title":"Class Exercise #2 - Using the marker function"},{"location":"week_03/Lab/readme/#sidenote-string-literals","text":"<p><pre><code>let popup = `${zoomLevel} + ${zoomLevel}`\n</code></pre>  Declaring a string with ` instead of <code>'</code> <code>'</code> or <code>\" \"</code>, allows you to convert <code>variables</code> to strings.  For example, the zoom level normally would be treated as a number, but when we brought it in with the <code>${}</code> combination it became a string so it could not be summed.</p> <p>This technique will be helpful for our pop-ups.</p>","title":"Sidenote: String Literals"},{"location":"week_03/Lab/readme/#functions-and-the-dom","text":"","title":"Functions and the DOM"},{"location":"week_03/Lab/readme/#the-htm-elements-avatag-the-last-airbender","text":"<p>When you see tags in HTML, like <code>&lt;body&gt;&lt;/body&gt;</code>, they are referred to as elements, so for example: <pre><code>&lt;water&gt;Katara&lt;/water&gt; \n&lt;air&gt;Aang&lt;/air&gt; \n&lt;earth&gt;Toph&lt;/earth&gt; \n&lt;fire&gt;Zuko&lt;/fire&gt;\n</code></pre>  Above we have four elements. Each element has a <code>content</code>, for example, the <code>earth</code> element\u2019s content is <code>Toph</code>. Unfortunately, despite how exciting those elements are, the most common HTML element is the <code>&lt;div&gt;&lt;/div&gt;</code> element, which is a generic container.</p> <p>The DOM is basically where HTML elements exists and it has an API that JavaScript can interact with with functions. </p>","title":"The HTM-Elements: Avatag the last Airbender"},{"location":"week_03/Lab/readme/#objective-make-a-button-that-we-can-click-on-to-fly-to-a-location-for-each-of-the-markers-you-made","text":"","title":"Objective: Make a button that we can click on to fly to a location for each of the markers you made."},{"location":"week_03/Lab/readme/#steps","text":"<ol> <li>Add a new function to our <code>addMarker</code> function</li> <li>Create the function to add buttons</li> <li>Add a function to toggle the zoom</li> </ol>  <p>To create HTML elements with JavaScript you need to use the createElement method.</p> <p>First, we will get our buttons ready by going to the <code>addMarker</code> function and adding a new function call for the function we haven\u2019t created yet.</p>  <p>js/init.js <pre><code>// Step 1 adding to our addMarker function\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt;`)\n    createButtons(lat,lng,title); // new line!!!\n    return message\n}\n</code></pre>  Next we will add our new function. Notice how we are using the <code>lat</code>,<code>lng</code>,and <code>title</code> from the <code>addMarker</code> function? That\u2019s why it was helpful to do step one first. js/init.js <pre><code>// Step 2 adding our new function\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    document.body.appendChild(newButton); //this adds the button to our page.\n}\n</code></pre>  Try clicking the button on the webpage and it should fly to the location of that marker!</p>","title":"Steps:"},{"location":"week_03/Lab/readme/#congratulations-on-finishing-the-javascript-functions-lab","text":"","title":"Congratulations on finishing the JavaScript FUNctions Lab!"},{"location":"week_03/Lab/readme/#final-code","text":"<p>js/init.js <pre><code>// declare variables\nlet zoomLevel = 5;\nconst mapCenter = [34.0709,-118.444];\n\n// use the variables\nconst map = L.map('map').setView(mapCenter, zoomLevel);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\n// create a function to add markers\nfunction addMarker(lat,lng,title,message){\n    console.log(message)\n    L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${title}&lt;/h2&gt;`)\n    createButtons(lat,lng,title); // new line!!!\n    return message\n}\n\n// create a function to add buttons with a fly to command\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n\n    // attach an event listner to the button with Leaflet's map.flyTo\n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); \n    })\n    document.body.appendChild(newButton); //this adds the button to our page.\n}\n\n// use our marker functions\naddMarker(37,-122,'home','home land!')\naddMarker(32,-118,'work','where i work land!')\naddMarker(39,-119,'location 1','random location')\naddMarker(36,-120,'location 2','another random location')\n</code></pre> </p> <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n\n        &lt;style&gt; #map{height:90vh}&lt;/style&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> </p>","title":"Final Code"},{"location":"week_03/Lab/readme/#lab-assignment-3-javascript-functions","text":"","title":"Lab Assignment #3 - JavaScript FUNctions"},{"location":"week_03/Lab/readme/#due-422","text":"<p>In this lab, we learned how functions are helpful for automating tasks. Functions also form the basis of the programming we will be doing. Your assignment this week is to create a map that will pan to certain makers when a button is clicked. </p> <p>The requirements are:</p> <ul> <li>Add at least 3 markers to the map using a JavaScript function</li> <li>Use the <code>&lt;button&gt;</code> element to execute a JavaScript function to interact with your map </li> <li>Add an Event Listener that executes the JavaScript function to interact with your map </li> </ul>","title":"Due 4/22"},{"location":"week_03/Lab/readme/#extra-credit","text":"<ul> <li>Use something else like images or text to move the map.</li> <li>Try something new with the Leaflet API</li> <li></li> </ul>","title":"Extra Credit:"},{"location":"week_03/Lab/readme/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Commit and publish your file to GitHub pages</li> <li>Find your <code>index.html</code> in the <code>Week_03</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_03/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #3</li> </ul>","title":"Submission"},{"location":"week_03/Materials/extra_credit/","text":"<p>Watch the film Coded Bias either on PBS or Netflix and write a short comment in the discussion forum here answering the following questions: - What were the highlights of the documentary for you? - What could be improved? - How does it relate to web development and civil society?</p>","title":"Extra Credit Assignment due 4/22"},{"location":"week_03/Materials/extra_credit/#stream-on","text":"","title":"Stream on:"},{"location":"week_03/Materials/extra_credit/#pbs","text":"<p>https://www.pbs.org/independentlens/videos/coded-bias-full-film/</p>","title":"PBS"},{"location":"week_03/Materials/extra_credit/#netflix","text":"<p>https://www.netflix.com/title/81328723?s=i</p>","title":"Netflix"},{"location":"week_03/Materials/extra_credit/#submission","text":"<p>Post your comment on this thread: https://github.com/albertkun/21S-ASIAAM-191A/discussions/91</p>","title":"Submission"},{"location":"week_03/Materials/lab_assignment/","text":"","title":"Lab assignment"},{"location":"week_03/Materials/lab_assignment/#lab-assignment-3-javascript-functions","text":"","title":"Lab Assignment #3 - JavaScript FUNctions"},{"location":"week_03/Materials/lab_assignment/#due-422","text":"<p>In this week\u2019s lab, we learned how functions are helpful for automating tasks. Functions also form the basis of the programming we will be doing. Your assignment this week is to create a map that will move to certain makers when a button is clicked. </p> <p>The requirements are:</p> <ul> <li>Add at least 3 markers to the map using a JavaScript function</li> <li>Use the <code>&lt;button&gt;</code> element to execute a JavaScript function to interact with your map </li> <li>Add an Event Listener that executes the JavaScript function to interact with your map </li> </ul>","title":"Due 4/22"},{"location":"week_03/Materials/lab_assignment/#extra-credit","text":"<ul> <li>Use something else like images or text to move the map.</li> <li>Try something new with the Leaflet API</li> </ul>","title":"Extra Credit:"},{"location":"week_03/Materials/lab_assignment/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_03</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_03/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #3</li> </ul> <p>https://github.com/albertkun/21S-ASIAAM-191A/discussions/123</p>","title":"Submission"},{"location":"week_03/Materials/pre-lab/","text":"<p>This week\u2019s pre-lab is optional: - Read https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript</p>","title":"Pre lab"},{"location":"week_04/readme/","text":"<p>Check out the new course \u201cWeeky\u201d if you are having trouble finding assignments.</p>","title":"Week 4 - Developing for Civil Society"},{"location":"week_04/readme/#lecture","text":"<ul> <li>Developing for civil society</li> <li>Nina Kin- Lessons Learned in Building Tech For Good</li> <li>Carolanne Link- Empowering Narratives: How Not to F@#$ It Up</li> </ul> <p>Recordings can now be found here: https://tinyurl.com/eb6pyw3k</p>","title":"Lecture"},{"location":"week_04/readme/#lab","text":"<ul> <li>Meaningful Survey Design Lecture</li> <li>Meaningful Survey Design</li> </ul>","title":"Lab"},{"location":"week_04/readme/#visiting-voices-nina-kin","text":"<p></p> <p>Nina Kin works as the Technical Lead at Los Angeles Metro and active in spaces of civic tech and mapping. Contact: KinN@metro.net</p>","title":"Visiting Voices: Nina Kin"},{"location":"week_04/readme/#visiting-voices-carolanne-link","text":"<p></p> <p>Carolanne Link is the Project Manager for the UCLA Web Accessibility Initiative and is a disability advocate. Contact: clink@oarc.ucla.edu</p>","title":"Visiting Voices: Carolanne Link"},{"location":"week_04/readme/#assignments","text":"","title":"Assignments"},{"location":"week_04/readme/#due-thursday-422","text":"<ul> <li> <p>Lab Assignment #3</p> </li> <li> <p>Group Assignment #2</p> </li> <li> <p>Pre-lab Readings</p> </li> </ul>","title":"Due Thursday 4/22:"},{"location":"week_04/readme/#due-tuesday-426","text":"<p>Readings: - https://handsondataviz.org/guiding.html - https://handsondataviz.org/public.html</p>","title":"Due Tuesday 4/26:"},{"location":"week_04/readme/#extra-credit-assignments","text":"","title":"Extra Credit Assignments"},{"location":"week_04/readme/#due-thursday-422_1","text":"<ul> <li>Coded Bias viewing</li> </ul>","title":"Due Thursday 4/22:"},{"location":"week_04/readme/#due-tuesday-426_1","text":"<ul> <li>Extra Thinking Cap</li> </ul>","title":"Due Tuesday 4/26:"},{"location":"week_04/Lab/extra/","text":"","title":"Extra"},{"location":"week_04/Lab/extra/#automatic-geocoding-for-free","text":"<p>Now we will perform a geocode (putting Latitude and Longitude to named places) on the location after each time it is run. To make things easier, we will need to install an add-on for this.</p> <p>Click on Add-ons:  Click on Get add-ons:  Search for <code>Geocode by Awesome Table</code>  Click the the button to open the add-on installation:  Click install:  Click continue to sign-in with Google:  Choose the account to give access to the geocoder add-on:  Allow the permissions (be sure to read what it allows first):  After the installation is done, go to <code>Add-ons</code> in the menu:  Click on the <code>Geocode by AwesomeTable</code> and select <code>Start Geocoding</code>  Click the column under the <code>address</code> column, it defaults to the first column:  Choose the <code>location</code> column:  Click the <code>Geocode!</code> button:  In the add-on menu for Geocode by Awesome Table, choose <code>Geocode on Form Submit</code>  Activate the trigger:   Close the window: </p>","title":"Automatic Geocoding for \u201cFree\u201d"},{"location":"week_04/Lab/extra/#publishing-the-survey","text":"<p>Now that our data is able to be geocoding, we can bring it into our HTML file through JavaScript. But first we have to publish the spreadsheet:</p> <p>Go to file:  Click on <code>Publish to web</code>:  Click on <code>Publish</code>:  Copy the URL in the address bar: </p> <p>Go to this website: https://sandbox.idre.ucla.edu/tools/gsJson/ Paste the URL in:  Click the button, <code>Get Spreadsheets</code>:  Click the button, <code>Get Spreadsheets JSON</code>:  Copy the results: </p> <p>In the <code>init.js</code> file paste the entire result into the <code>URL</code> variable:</p>  <p>js/init.js <pre><code>let url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        console.log(data)\n    }\n</code></pre>  In your console, you should now see the Google Spreadsheet data when some one enters information.</p>","title":"Publishing the survey"},{"location":"week_04/Lab/readme/","text":"","title":"Meaningful Survey Design"},{"location":"week_04/Lab/readme/#objectives","text":"<ul> <li>Understand how to create a Google form with meaningful questions</li> <li>Know how to embed a Google Form into a website</li> </ul>","title":"Objectives:"},{"location":"week_04/Lab/readme/#bonus","text":"<ul> <li>Use Microsoft Forms and Flow to connect a translated form to Google Sheets.</li> </ul>  <p>Start by creating a week4 folder in your lab assignments repo.</p> <p>Create a new html page called <code>index.html</code> and add this code:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"style/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n        &lt;!-- put the survey in here! --&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>  Create a <code>style</code> folder and create this <code>style.css</code>: style/style.css <pre><code>    body{\n        display:grid;\n        grid-template-columns: 1fr 1fr; /* this creates an even two column layout*/\n        grid-template-areas: \"mappanel sidepanel\" /* this creates one row with map panel on the left and sidepanel on the right */\n    }\n\n    #map{\n        height:90vh;\n        grid-area: mappanel;\n    } \n\n    #survey{\n        grid-area: sidepanel;\n    } \n</code></pre>  Create a <code>js</code> folder and create this <code>init.js</code>: js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nlet url = \"GIVE_ME_A_URL\"\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        console.log(data)\n    })\n</code></pre> </p>","title":"Bonus:"},{"location":"week_04/Lab/readme/#creating-a-new-google-form","text":"<p>Navigate to Google Forms and click on \u201cBlank\u201d: </p> <p>Give a title to your Google Form by clicking on \u201cUntitled Form\u201d: </p> <p>Add a little description about the survey form here. For our example we will be collecting stories about vaccinations during COVID-19.</p>","title":"Creating a new Google Form"},{"location":"week_04/Lab/readme/#adding-a-google-form-question","text":"<p>Click on the \u201cAdd Question\u201d button to add a question: </p> <p>Start typing \u201cLocation\u201d and Google will automatically guess the question type for you. </p> <p></p> <p>You can fill in descriptions below the question to help with answering by clicking on the \u201cmore\u201d triple dots: </p> <p>Then going to description: </p> <p>And typing out a help description: </p> <p>You can check the \u201crequired\u201d mark to make this question necessary to move on. </p>","title":"Adding a Google Form Question"},{"location":"week_04/Lab/readme/#conditional-questions","text":"<p>Add a relevant question to help guide the user about the survey, <code>Do you speak English fluently</code>?\u201d` </p> <p>Click on the <code>triple dots</code>: </p> <p>Select <code>Go to section based on answer</code>: </p>","title":"Conditional Questions"},{"location":"week_04/Lab/readme/#adding-new-sections","text":"<p>Add a new section: </p> <p>Title it <code>Language Details</code> </p> <p>Add one question on <code>What language do you primary speak at home</code>? </p> <p>And another on <code>What is your age</code>? </p> <p>Go back to the question <code>Do you speak English fluently?</code> and for <code>No</code>: </p> <p>Choose <code>Go to Section 2</code>.</p> <p></p> <p>Scroll to the bottom and add a new section: </p> <p>Call it <code>Vaccination Story</code> and add a new question:</p> <p></p> <p>Add the question:</p>  <p><code>Would you be comfortable with sharing your story?</code> - Yes - No</p>  <p>Make it a required question.</p>","title":"Adding new sections"},{"location":"week_04/Lab/readme/#bonus-feel-free-to-make-it-branch-here-so-if-some-one-chooses-no-they-submit-the-form-and-finish","text":"<p>Class exercise:</p> <p>Add two open-ended questions:</p>  <p>How did you make the appointment? </p> <p>How did you get to the location?</p>  <p>Make sure they are both <code>Paragraph</code> answer types: </p>","title":"Bonus: Feel free to make it branch here, so if some one chooses \u201cNo\u201d they submit the form and finish."},{"location":"week_04/Lab/readme/#wrapping-the-form-up","text":"<p>Go back to <code>Do you speak English fluently</code> and make <code>Yes</code> go to <code>Section 3</code>: </p> <p>Your final form should look something like this: https://forms.gle/E8xBqKLJNJyvxGcK8</p> <p>Click on <code>Responses</code>:  Click on the Google Spreadsheet button: </p> <p>Change the title and click on <code>Create</code> button:  Open the connected Google Form: </p> <p>Click here to share your form: </p> <p>Click on the \u201cembed\u201d tab: </p> <p>Copy the Embeded HTML by clicking the button: </p> <p>Go back to <code>index.html</code> and paste the embedded HTML into the survey div: <pre><code>&lt;div id=\"survey\"&gt;\n    &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre> </p>","title":"Wrapping the form up"},{"location":"week_04/Lab/readme/#accessing-the-responses","text":"<p>Click on responses: </p> <p>Click on the Google Spreadsheet button: </p> <p>Click on create: </p> <p>Open the response Google Sheet by clicking open or the Google Sheets icon:</p> <p></p> <p>This is your survey reponses.</p>","title":"Accessing the Responses"},{"location":"week_04/Lab/readme/#advanced-multi-language-support","text":"","title":"Advanced: Multi-Language Support"},{"location":"week_04/Lab/readme/#google-forms","text":"<p> Unfortunately, Google Forms has poor native support when it comes to multi-language support. You can see that the <code>required</code>, <code>other</code>, and <code>date</code> fields are all in English.</p>","title":"Google Forms"},{"location":"week_04/Lab/readme/#microsoft-forms","text":"<p></p> <p>Microsoft Forms has much better localization in that regard, but the workflow is more tricky to set up.  </p>","title":"Microsoft Forms"},{"location":"week_04/Lab/readme/#note-regardless-of-google-forms-or-microsoft-forms-you-still-have-to-translate-the-surveys-manually-yourself","text":"","title":"Note: Regardless of Google Forms or Microsoft Forms you still have to translate the surveys manually yourself!"},{"location":"week_04/Lab/readme/#ms-means-more-complicated","text":"<p>To use MS Forms you need to activate your UCLA Office365 account: https://help.bol.ucla.edu/kb_view.do?sysparm_article=KB0012869</p> <p>Once you do get your Microsoft Form up and running, you will be sending the information from MS Form into a Google Sheet so you still need to know how to use the Geocoder add-on! </p>","title":"MS means more complicated"},{"location":"week_04/Lab/readme/#one-more-extra-step","text":"<p>To connect the data to Google Sheets, you need to use  Microsoft Flow which is an automation tool. Here\u2019s the method showing how to connect MS Flow to MS Forms and Google Sheets</p> <p>In the end, your group should ask yourself if it\u2019s worth it. </p> <p>But here\u2019s some example surveys I made using Microsoft Forms (using Google Translate for the Korean, Chinese versions):</p> <p>English</p> <p>Korean</p> <p>Chinese</p> <p>Japanese</p> <p>In Microsoft Forms to get the form to show up in the language, you have to do a bit of snooping around to change the URLs to specify the language here is the a table representing the most common ones:</p>    Language Extra Code     Korean &amp;lang=ko   Spanish &amp;lang=es-mx   Chinese (Simplified) &amp;lang=zh-cn   Chinese (Traditional) &amp;lang=zh-tw   Japanese &amp;lang=ja","title":"One more extra step\u2026"},{"location":"week_04/Materials/Group_Assignment_3/","text":"","title":"Survey"},{"location":"week_04/Materials/Group_Assignment_3/#due-thursday-429","text":"<p>Design a survey that will focus on the community voices for your project.</p> <p>You may also revise your memo to ensure that you focus on specific community members or group.</p>","title":"Due Thursday 4/29"},{"location":"week_04/Materials/Group_Assignment_3/#submission","text":"<p>Submit your survey using this Google Form: https://forms.gle/5aPsriPe1iCou6qG8</p>","title":"Submission:"},{"location":"week_04/Materials/pre-lab/","text":"<p>We will be working with Google Forms in the lab this week, so please read the following to familiarize yourself with data and working with Google Forms. While we will not be doing participatory asset mapping, the first reading demonstrates important considerations in designing any participatory mapping activity.</p> <p>Read: - From Participatory Asset Mapping   - What is Participatory Asset mapping?   - When should you do Participatory Asset mapping?   - How do you do Participatory Asset mapping?   - Ethics in community based Participatory Action research</p> <ul> <li> <p>Harvard tip sheet for designing questions: https://psr.iq.harvard.edu/files/psr/files/PSRQuestionnaireTipSheet_0.pdf</p> </li> <li> <p>Google\u2019s 3 steps of getting started with Google Forms</p> </li> </ul>","title":"Pre lab"},{"location":"week_05/readme/","text":"","title":"Week 5 - Society, Technology, and Ethics"},{"location":"week_05/readme/#lecture","text":"<ul> <li>Connecting the dots of technology and ethics</li> </ul> <p>Recordings can now be found here: https://tinyurl.com/eb6pyw3k</p>","title":"Lecture"},{"location":"week_05/readme/#lab","text":"<ul> <li>Loops and APIs</li> </ul>","title":"Lab"},{"location":"week_05/readme/#visiting-voices-adriane-hoff","text":"<p></p> <p>Adriane Hoff is the out-going president of the Wilshire Center Koreatown Neighborhood Council (WCKNC) and community activist. She is also on the steering committee on Streets For All, a transportation advocacy group in Los Angeles.</p>","title":"Visiting Voices: Adriane Hoff"},{"location":"week_05/readme/#assignments","text":"","title":"Assignments"},{"location":"week_05/readme/#due-thursday-429","text":"<ul> <li>Group Assignment #3</li> </ul>","title":"Due Thursday 4/29:"},{"location":"week_05/readme/#due-tuesday-54","text":"<ul> <li>Thinking Cap #5</li> </ul>","title":"Due Tuesday 5/4:"},{"location":"week_05/readme/#readings","text":"<ol> <li>Crampton, J. (1995) The Ethics of GIS.</li> <li>Marx, P. (2020) Don\u2019t Blame Social Media. Blame Capitalism.</li> </ol>","title":"Readings:"},{"location":"week_05/readme/#due-thursday-56","text":"<ul> <li>Lab Assignment #4</li> <li>Group Assignment #4</li> </ul>","title":"Due Thursday 5/6:"},{"location":"week_05/readme/#extra-credit-assignment","text":"","title":"Extra Credit Assignment"},{"location":"week_05/readme/#due-tuesday-54_1","text":"<ul> <li>Extra Reading Response</li> </ul>","title":"Due Tuesday 5/4:"},{"location":"week_05/Lab/lab_assignment/","text":"","title":"Lab assignment"},{"location":"week_05/Lab/lab_assignment/#lab-assignment-4-loops-and-apis","text":"","title":"Lab Assignment #4 - Loops and APIs"},{"location":"week_05/Lab/lab_assignment/#due-56","text":"<p>In this week\u2019s lab, we learned how to loop through data and connect to an API. Your task is to create a mini-version of the final group project for the class that intakes data and maps it.</p> <p>The requirements are:</p> <ul> <li>Use any type of for-loop within a JavaScript function that adds API data from a Google Spreadsheet form.</li> <li>Add a pop-up with at least 2 fields from the Google Form.</li> <li>Add data from Google Spreadsheets into your map</li> </ul>","title":"Due 5/6"},{"location":"week_05/Lab/lab_assignment/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_05</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_05/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #4:</li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/137</li> </ul>","title":"Submission"},{"location":"week_05/Lab/readme/","text":"","title":"Loops and APIs"},{"location":"week_05/Lab/readme/#objectives","text":"<ul> <li>Implement a trigger for geocoding \u201clocation\u201d data in Google Sheets</li> <li>Be able to use loops and conditional statements in JavaScript </li> <li>Understand what an API is </li> <li>Add data from a Google Sheet into a website</li> </ul>  <p>Start by creating a <code>week5</code> folder in your lab assignments repo.</p>","title":"Objectives:"},{"location":"week_05/Lab/readme/#optional-if-you-finished-lab-4-you-can-also-copy-the-contents-of-your-week_4-folder-and-skip-the-following-setup-section","text":"","title":"Optional: If you finished <code>lab 4</code>, you can also copy the contents of your <code>week_4</code> folder and skip the following setup section."},{"location":"week_05/Lab/readme/#setup","text":"<p>Create a new html page called <code>index.html</code> and add this code:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"style/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n        &lt;!-- this is the iframe for our survey --&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p>  <p>Create a <code>style</code> folder and create this <code>style.css</code>:</p>  <p>style/style.css <pre><code>    body{\n        display:grid;\n        grid-template-columns: 1fr 1fr; /* this creates an even two column layout*/\n        grid-template-areas: \"mappanel sidepanel\" /* this creates one row with map panel on the left and sidepanel on the right */\n    }\n\n    #map{\n        height:90vh;\n        grid-area: mappanel;\n    } \n\n    #survey{\n        grid-area: sidepanel;\n    } \n</code></pre>  Create a <code>js</code> folder and create this <code>init.js</code>: js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nlet url = \"GIVE_ME_A_URL\"\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        console.log(data)\n    })\n\nfunction addMarker(lat,lng,message){\n        L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${message}&lt;/h2&gt;`)\n        return message    \n}\n\naddMarker(37,-122,'home land!')\n</code></pre> </p>","title":"Setup"},{"location":"week_05/Lab/readme/#revisiting-functions","text":"<p>Open up your Google Sheet from last week. </p> <p>Go to column for <code>Location</code> and remember what column it is, for me it is <code>C</code>: </p> <p>Next, add two columns, one for <code>lat</code> and another for <code>long</code>:  Now click on <code>Tools</code> -&gt; <code>Script Editor</code>:  When you first launch, you will see a blank <code>myFunction()</code> get ready to paste over it:  Copy and paste the following code into the entire script: <pre><code>function myFunction() {\n  let sheet = SpreadsheetApp.getActiveSheet();\n\n  let range = sheet.getDataRange();\n  let cells = range.getValues();\n\n  let latitudes = [['lat']];\n  let longitudes = [['long']];\n\n  for (let i = 0; i &lt; cells.length; i++) {\n    // change cells[i][2] if your address is not in column 'C', for example cells[i][1] for column 'B' or cells[i][3] for column D\n     addressColumn = cells[i][2] \n     let lat = lng = 0;\n    if (i &gt; 0) {\n      if (addressColumn){\n    let address = addressColumn;\n    console.log(address)\n\n    if(address){\n      let geocoder = Maps.newGeocoder().geocode(address);\n      let res = geocoder.results[0];\n        if (res) {\n          lat = res.geometry.location.lat;\n          lng = res.geometry.location.lng;\n        }\n      }\n    }\n       latitudes.push([lat]);\n    longitudes.push([lng]);\n      }\n  }\n  sheet.getRange('D1') // this is the latitude column\n  .offset(0, 0, latitudes.length)\n  .setValues(latitudes);\n  sheet.getRange('E1') // this is the longitude column\n  .offset(0, 0, longitudes.length)\n  .setValues(longitudes);\n  Utilities.sleep(5000)\n}\n</code></pre>  Click on the \u201crun\u201d button to test the script:  If it ran successfully then you should now see latitude and longitude filled in the Google Sheet! </p> <p>Go back to the Google Scripts and click on triggers:  Click on Add Trigger:</p> <p></p> <p>Click on Select Event Type: </p> <p>Change to <code>On Form Submit</code> so that everytime the the form gets submitted a new record gets latitude/longitude added: </p> <p>Click <code>Save</code>: </p> <p>A pop-up should appear, but if you have a pop-up blocker like on FireFox, then you may have to click on <code>Options</code>:</p> <p></p> <p>Then allow this particular popup to appear. </p> <p>Select your Google Account to continue: </p> <p>Click on <code>Advanced</code>: </p> <p>Click on <code>Go to Untitled Project (unsafe)</code> </p> <p>Click on <code>Allow</code> </p> <p>Click on <code>Save</code>: </p> <p>Congratulations, now each time a form gets submitted you will be able to map the locations:</p> <p></p>","title":"Revisiting Functions"},{"location":"week_05/Lab/readme/#class-exercise-1-test-your-form","text":"<ul> <li>Add 2-3 locations to your Google Form and see if the new locations work. </li> <li>What type of locations do not show up?</li> </ul>  Answer Locations that are blank or that are not recognized by the Google Geocoder.","title":"Class Exercise #1 - Test your form!"},{"location":"week_05/Lab/readme/#publishing-your-survey","text":"<p>Now that our data is able to be geocoded, we can bring it into our HTML file through JavaScript. But first we have to publish the spreadsheet:</p> <p>Go to file: </p> <p>Click on <code>Publish to web</code>:</p> <p></p> <p>Click on <code>Publish</code>:</p> <p></p> <p>Copy the URL in the address bar:</p> <p></p>","title":"Publishing your survey"},{"location":"week_05/Lab/readme/#go-to-this-website","text":"<p>https://sandbox.idre.ucla.edu/tools/gsJson/</p> <p>Paste the URL in: </p> <p>Click the button, <code>Get Spreadsheets</code>: </p> <p>Click the button, <code>Get Spreadsheets JSON</code>: </p> <p>Copy the results: </p> <p>In the <code>init.js</code> file paste the entire result into the <code>URL</code> variable:</p>  <p>js/init.js <pre><code>let url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        console.log(data)\n    }\n</code></pre>  In your console, you should now see the Google Spreadsheet data when some one enters information!</p>","title":"Go to this website:"},{"location":"week_05/Lab/readme/#time-for-loops-but-they-look-foreign","text":"<p>In the function that we copy and pasted you may have seen:</p> <pre><code>  for (let i = 0; i &lt; cells.length; i++) {\n    // change cells[i][2] if your address is not in column 'C', for example cells[i][1] for column 'B' or cells[i][3] for column D\n     addressColumn = cells[i][2] \n     let lat = lng = 0;\n    if (i &gt; 0) {\n      if (addressColumn){\n    let address = addressColumn;\n    console.log(address)\n</code></pre>   <ul> <li><code>for</code> is a keyword for starting the <code>for loop</code></li> <li><code>(let i = 0;</code> is a placeholder variable for counting, <code>i</code> can be anything, but it has be consistent in the <code>for loop</code>.</li> <li><code>i &lt; cells.length</code> basically says, \u201crun this loop as long as it is less than the total number of cells.\u201d</li> <li><code>i++</code> means keep adding while the loop is able to run</li> <li><code>{}</code> and finally the brackets are the code block to execute while the loop runs.</li> </ul>  <p>This is the basic example of a <code>for</code> loop. What a <code>for-loop</code> means is to <code>go through the items and do something each time</code>. Loops are one of the most critical tool for programmers for automating tasks.</p> <p>When the loop ends, we say that the loop is broken out of: </p>","title":"Time for-loops, but they look.. foreign\u2026"},{"location":"week_05/Lab/readme/#iterable-items","text":"<p>Loops can ONLY occur over iterable items, meaning stuff that you can count or go through, such as numbers, lists, objects, and arrays. </p> <p>In the technical schematic diagram above, notice that the items is a JavaScript array. When the array hits the last item, the loop stops. </p>","title":"Iterable Items"},{"location":"week_05/Lab/readme/#for-of","text":"<p>The for of loop is much easier to understand than the basic <code>for</code> loops and works as follows: <pre><code>const longString = 'hellooooooooooooo'\nconst array1 = ['a', 'b', 'c'];\n\n// this loops through an array\nfor (const stuff of array1){\n    console.log(stuff)\n}\n\n// this loops through a string!\nfor (const letter in longstring){\n    console.log(letter)\n}\n</code></pre>  You can use any variable in place of <code>letter</code> or <code>stuff</code> and it is quite clear what is being looped over inside the scope brackets.</p>","title":"For of"},{"location":"week_05/Lab/readme/#for-each","text":"<p>When dealing with arrays, such as this: <pre><code>let myArray = ['hello','this','is','an','array']\n</code></pre>  You can use the <code>.forEach</code> method, which is much easier to understand, but acts similar to a <code>forLoop</code> and requires a <code>function</code> to run:</p> <pre><code>let myArray = ['hello','this','is','an','array']\nmyArray.forEach(justChecking);\n\nfunction justChecking(data){\n    console.log(data)\n}\n</code></pre>","title":"For Each"},{"location":"week_05/Lab/readme/#class-exercise-2-test-your-loop","text":"<ul> <li>Create an array of objects 3 or more items</li> <li>Loop through an object with some type of <code>for</code> loop</li> <li>Loop through an array of objects with .forEach</li> <li>Utilize the <code>array</code> with <code>.forEach</code> in a function </li> </ul>","title":"Class Exercise #2 - Test your loop!"},{"location":"week_05/Lab/readme/#bonus-exercise","text":"<ul> <li>Use the <code>create marker</code> function to add your array to the map</li> <li>Try to create your own for-loop for counting up to the number 10. Hint from MDN</li> </ul>  Answer <pre><code>let myArray = [{'name':'hello','lat':37,'lng':-122},{'name':'this','lat':35,'lng':-119},{'name':'is','lat':36,'lng':-120}]\nmyArray.forEach(addMarker);\n\nfunction addMarker(data){\n        console.log(data)\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.message}&lt;/h2&gt;`)\n        return data.message    \n\n// Bonus Answer\n// let str = '';\n// for (let i = 0; i &lt; 11; i++) {\n//   str = str + i;\n// }\n\n// console.log(str);\n// expected output: \"012345678\"\n</code></pre>","title":"Bonus Exercise"},{"location":"week_05/Lab/readme/#connecting-to-an-api","text":"<p>An API can be really thought of as an appliance or application and we are just plugging into it so we can access the data it provides.</p> <p>Let\u2019s see what this means with our data that we just brought in from the Google Sheets:</p>  <p>js/init.js <pre><code>let url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        console.log(data)\n    }\n</code></pre>  Notice that the data we got is kind of messy because of the Google API doesn\u2019t officially support our methods.</p>  <p></p> <p>Let\u2019s modify our arrow function so that we take the data and clean it up. First we will add the <code>processData</code> function:</p>  <p>js/init.js <pre><code>function processData(theData){\n        const formattedData = [] /* this array will eventually be populated with the contents of the spreadsheet's rows */\n        const rows = theData.feed.entry // this is the weird Google Sheet API format we will be removing\n        // we start a for..of.. loop here \n        for(const row of rows) { \n          const formattedRow = {}\n          for(const key in row) {\n            // time to get rid of the weird gsx$ format...\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          // add the clean data\n          formattedData.push(formattedRow)\n        }\n        // lets see what the data looks like when its clean!\n        console.log(formattedData)\n        // we can actually add functions here too\n}\n</code></pre>  Now, let\u2019s add the function to clean the data up after our data gets returned:</p>  <p><pre><code>let url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n        // console.log(data)\n        processData(data)\n    }\n</code></pre>  Open the debug console and click on our array:</p> <p></p> <p>Our data should look nice and clean now! </p> <p></p> <p>Time for the final step..</p>","title":"Connecting to an API"},{"location":"week_05/Lab/readme/#turning-our-data-into-markers","text":"<p>Now that our data is cleaned we can use a <code>.forEach</code> to <code>loop</code> through our data and run the <code>addMarker()()</code> function on them. We will add this in our <code>processData</code> function.</p>  <p>js/init.js <pre><code>function processData(theData){\n        const formattedData = [] /* this array will eventually be populated with the contents of the spreadsheet's rows */\n        const rows = theData.feed.entry // this is the weird Google Sheet API format we will be removing\n        // we start a for..of.. loop here \n        for(const row of rows) { \n          const formattedRow = {}\n          for(const key in row) {\n            // time to get rid of the weird gsx$ format...\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          // add the clean data\n          formattedData.push(formattedRow)\n        }\n        // lets see what the data looks like when its clean!\n        console.log(formattedData)\n        // we can actually add functions here too\n        formattedData.forEach(addMarker)\n}\n</code></pre>  Open the console and look at our data, we should take note of our field names and the be sure to add them to our markers. Also notice that our markers haven\u2019t showed up yet!  That\u2019s because we have to modify the <code>addMarker()</code> function to use the <code>data</code> object:</p>  <p><pre><code>// old code\n// function addMarker(){\n//         L.marker([lat,lng]).addTo(map).bindPopup(`&lt;h2&gt;${name}&lt;/h2&gt;`)\n//         return name    \n// }\n\nfunction addMarker(data){\n        // console.log(data)\n        // these are the names of our fields in the google sheets:\n        L.marker([data.latitude,data.longitude]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n        return data.timestamp\n}\n</code></pre>  Final Code:</p>  <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n        // console.log(data)\n        // these are the names of our fields in the google sheets:\n        L.marker([data.latitude,data.longitude]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n        return data.timestamp\n}\n\nlet url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\n\nfunction formatData(theData){\n        const formattedData = [] /* this array will eventually be populated with the contents of the spreadsheet's rows */\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)        \n}\n</code></pre> </p> <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"style/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n        &lt;!-- this is the iframe for our survey --&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>style/style.css <pre><code>body{\n    display:grid;\n    grid-template-columns: 1fr 1fr; /* this creates an even two column layout*/\n    grid-template-areas: \"mappanel sidepanel\" /* this creates one row with map panel on the left and sidepanel on the right */\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#survey{\n    grid-area: sidepanel;\n} \n</code></pre>  Congratulations on finishing the lab! You only need to add a few data fields in order to finish the lab assignment.</p>","title":"Turning our data into markers"},{"location":"week_05/Lab/readme/#lab-assignment-4-loops-and-apis","text":"","title":"Lab Assignment #4 - Loops and APIs"},{"location":"week_05/Lab/readme/#due-56","text":"<p>In this week\u2019s lab, we learned how to loop through data and connect to an API. Your task is to create a mini-version of the final group project for the class that intakes data and maps it.</p> <p>The requirements are:</p> <ul> <li>Use any type of for-loop within a JavaScript function that adds API data from a Google Spreadsheet form.</li> <li>Add a pop-up with at least 2 fields from the Google Form.</li> <li>Add data from Google Spreadsheets into your map</li> </ul>","title":"Due 5/6"},{"location":"week_05/Lab/readme/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_05</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_05/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #4: </li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/137</li> </ul>","title":"Submission"},{"location":"week_05/Materials/extra_reading_response/","text":"","title":"Extra Reading Response"},{"location":"week_05/Materials/extra_reading_response/#due-54","text":"<p>Read the following paper:</p> <p>Hirst, M. (2012) One tweet does not a revolution make: Technological determinism, media and social change. Global Media Journal.</p> <p>Reflect on the following questions:</p> <ul> <li>What do you think about the author\u2019s view on social media?</li> <li>How does the limits of social media mentioned in the paper relate your online survey?</li> </ul>","title":"Due 5/4"},{"location":"week_05/Materials/extra_reading_response/#submission","text":"<p>Respond to the following post as a comment: https://github.com/albertkun/21S-ASIAAM-191A/discussions/132</p>","title":"Submission"},{"location":"week_05/Materials/group_assignment_4/","text":"","title":"Survey Diagram and Wireframe"},{"location":"week_05/Materials/group_assignment_4/#due-56","text":"<p>With the survey and memo drafted, we can now make sure that our survey fits our goals set out in the memo and think about how the final application will look. Revising your survey is also an optional part of this assignment.</p> <p>There are two seperate parts to this assignment. Both deliverables can use the following tools or anything else your group is comfortable with:</p> <ul> <li>Pen and paper</li> <li>Draw.io</li> <li>Google Slides</li> <li>Figma</li> </ul>","title":"Due 5/6"},{"location":"week_05/Materials/group_assignment_4/#part-1-survey-diagram","text":"<p>Generate a diagram that explains how your survey questions and objectives in the memo are connected to goal of empowering the community. </p> <p>Your diagram must have these components:    1. Represent the specific community are you trying to uplift.    2. Represent the survey/project goal.    3. Represent each question in your survey and draw lines connecting them to either the community representation or the survey/project goal.     4. As you draw the lines from each question, explain what connection is being made.</p> <p>Feel free to get creative, but be sure to emphasis how your questions are related to the objective of the survey.</p> <p>See below for an example using Draw.io:  https://drive.google.com/file/d/12UbBhuXm28RAhgFo5nLiVZ9cmtzNecwi/view?usp=sharing</p>","title":"Part 1: Survey Diagram"},{"location":"week_05/Materials/group_assignment_4/#part-2-simple-wireframe","text":"<p>Imagine how the results of the survey and develop a VERY simple wireframe on what your web application would look like. </p> <p>The wireframe must include the following:    1. A map (e.g. a panel that says <code>map</code> is fine)    2. Interaction that shows the community empowerment in action (e.g. <code>pop-up on the map</code> or <code>panel to the left with stories</code>)    3. An interaction to fill out the survey (e.g. a button for <code>taking the survey</code>)</p> <p> More examples: https://docs.google.com/presentation/d/1famiX2lWNtsAk-o3_S48Ka7bImBAvRq3UXBKllDwMvw/edit#slide=id.p</p>","title":"Part 2: Simple wireframe"},{"location":"week_05/Materials/group_assignment_4/#submission","text":"<p>Have a group member comment on the following thread with links to the diagrams/photos: https://github.com/albertkun/21S-ASIAAM-191A/discussions/135</p> <p>Submit your revised survey using this form: https://forms.gle/xNH4fTWGP4ZQ6VjR7</p>","title":"Submission"},{"location":"week_06/readme/","text":"","title":"Week 6 - Human-Centered Design"},{"location":"week_06/readme/#lecture","text":"<ul> <li>Designing for Civil Society</li> </ul> <p>Recordings can now be found here: https://tinyurl.com/eb6pyw3k</p>","title":"Lecture"},{"location":"week_06/readme/#lab","text":"<ul> <li>Design DeciCSSions</li> <li>Lab Slides</li> </ul>","title":"Lab"},{"location":"week_06/readme/#visiting-voices-yoh-kawano","text":"<p></p> <p>Yoh Kawano is a research coordinator at UCLA\u2019s Institute for Digital Research and Technology. His community empowerment is on narratives in Japan\u2019s Fukushima prefecture following the 2011 Tsunami. </p> <p>Email: yohman@gmail.com</p>","title":"Visiting Voices: Yoh Kawano"},{"location":"week_06/readme/#assignments","text":"","title":"Assignments"},{"location":"week_06/readme/#due-thursday-56","text":"<ul> <li>Lab Assignment #4</li> <li>Group Assignment #4</li> <li>Pre-lab </li> </ul>","title":"Due Thursday 5/6:"},{"location":"week_06/readme/#due-tuesday-511","text":"<ul> <li>Thinking Cap #6</li> </ul>","title":"Due Tuesday 5/11:"},{"location":"week_06/readme/#due-thursday-513","text":"<ul> <li>Lab Assignment #5</li> </ul>","title":"Due Thursday 5/13:"},{"location":"week_06/readme/#readings","text":"<ol> <li>Costanza-Chock, S. (2018) Design Justice.</li> </ol>","title":"Readings:"},{"location":"week_06/Lab/lab_assignment/","text":"","title":"Lab Assignment #5 - CSS Grid Layouts"},{"location":"week_06/Lab/lab_assignment/#due-513","text":"<p>Using your lab assignment from <code>week 5</code>, touch up your mapplication by creating a layout with CSS Grid and making a cohesive webpage.</p> <p>The requirements are: - A title for the webpage describing what is being shown - Design a responsive-layout using CSS Grid - Use a sub-grid (grid-within-a-grid) - Utilize <code>buttons</code> or <code>divs</code> to interact with your map (Revisit Lab #3 for more info)</p>","title":"Due 5/13"},{"location":"week_06/Lab/lab_assignment/#extra-resources","text":"<ul> <li> <p>MDN CSS Grid Guides</p> </li> <li> <p>CSS Grid Starter Layouts</p> </li> <li> <p>CSS Grid Styling</p> </li> </ul>","title":"Extra Resources:"},{"location":"week_06/Lab/lab_assignment/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_06</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_06/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #5: </li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/143</li> </ul>","title":"Submission"},{"location":"week_06/Lab/readme/","text":"","title":"Design DeCSSions"},{"location":"week_06/Lab/readme/#objectives","text":"<ul> <li>Add content from Google Form into a <code>div</code></li> <li>Use CSS Grid to change page layouts</li> </ul> <p>Today\u2019s lab will cover how to put your data in other places besides just the map and work with CSS Grid layouts. </p> <p>Start by creating a <code>week_6</code> folder in your assignments repo.</p>","title":"Objectives:"},{"location":"week_06/Lab/readme/#optional-if-you-want-to-work-with-your-own-layout-you-can-copy-the-contents-of-your-week_5-folder-and-skip-the-following-setup-section","text":"","title":"Optional: If you want to work with your own layout, you can copy the contents of your <code>week_5</code> folder and skip the following setup section."},{"location":"week_06/Lab/readme/#setup","text":"<p>Create the following files:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Basic Leaflet Map&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n        &lt;!-- this is the iframe for our survey --&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfunction addMarker(data){\n        // console.log(data)\n        // these are the names of our lat/long fields in the google sheets:\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n        return data.timestamp\n}\n\nlet url = \"https://spreadsheets.google.com/feeds/list/1j3a2do9HIS6xvpBsKMjmI4soNaqGdlnIkwYQHktmp1U/oua1awz/public/values?alt=json\"\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\n\nfunction formatData(theData){\n        const formattedData = [] /* this array will eventually be populated with the contents of the spreadsheet's rows */\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)        \n}\n</code></pre> </p> <p>styles/style.css</p>  <p>Note: The folder is named <code>styles</code>!!!! <pre><code>body{\n    display:grid;\n    grid-template-columns: 1fr 1fr; /* this creates an even two column layout*/\n    grid-template-areas: \"mappanel sidepanel\" /* this creates one row with map panel on the left and sidepanel on the right */\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#survey{\n    grid-area: sidepanel;\n} \n</code></pre> </p>","title":"Setup"},{"location":"week_06/Lab/readme/#getting-our-data-in-place","text":"<p>Go ahead and start the live server to make sure that the code is up and running. In Firefox, open up the <code>Debug Console</code> (right click inspect element OR pressing <code>F12</code>) and click on the array from last week:</p> <p></p> <p>In an JSON object, <code>keys</code> are essentially the field names: </p> <p>And <code>values</code> are the contents: </p> <p>Remember, to access a value, you have to access the <code>object</code> and then the <code>key</code> using <code>.</code> notation.</p> <p>For example, last week when we wanted the <code>lat</code> data, we used <code>data.lat</code>.</p>","title":"Getting our data in place!"},{"location":"week_06/Lab/readme/#prepping-the-div","text":"<p>In our <code>index.html</code> file, let\u2019s add a <code>&lt;div&gt;</code> for our new content:</p>  <p>index.html <pre><code>        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;!-- add before the map div, or after, either way works.\n         Because we will define the layout in CSS Grid --&gt;\n</code></pre>  Now, let\u2019s look at the <code>location</code> key. We probably want to add the locations to our contents to see what locations or showing up, as some people might put the same location more than twice! </p>  <p>We probably want to make buttons from these locations soooo....</p>","title":"Prepping the <code>div</code>"},{"location":"week_06/Lab/readme/#pop-quiz-do-you-remember-how-to-create-buttons-from-lab-3","text":"<p>Where would it be best for a line to create buttons go? <code>createButtons(lat,lng,title);</code></p>  Answer  Correct, it should go in our `addMarker()` function! So that when we add markers, buttons are added afterwards!  <p>Add the line for the familar <code>createButton()</code> function in our JavaScript file:</p>  <p>js/init.js</p>  <p><pre><code>function addMarker(data){\n        // console.log(data)\n        // these are the names of our lat/long fields in the google sheets:\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n\n        createButtons(lat,lng,location)\n\n        return data.timestamp\n}\n</code></pre>  And now, just like in lab 3, we are going to add buttons!</p> <pre><code>function createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    document.body.appendChild(newButton); //this adds the button to our page.\n}\n</code></pre>  <p>Wait.. it didn\u2019t work? Well, that\u2019s because we have to tweak a few things\u2026</p> <p>Any ideas?</p>  Answer  1. First we need to make sure we use `data` object! Which means making sure we use the `object` + `.` + `key` format.   2. Next we need to change the `document.body.appendChild(newButton)` to use the `div` that we created earlier!","title":"Pop-Quiz! Do you remember how to create buttons from Lab #3?"},{"location":"week_06/Lab/readme/#accessing-object-keys-again","text":"<p>To address the issue of our data being stored in an object, the <code>createButton()</code> function should look like this: <pre><code>createButtons(data.lat,data.lng,data.location)\n</code></pre> </p>  <ul> <li>Where we are accessing the <code>data</code> <code>object</code>\u2018s <code>lat</code>, <code>lng</code>, and <code>location</code>. </li> <li>Note: Your <code>keys</code> MUST match your data <code>object</code>!!</li> <li>For example: If your survey spreadsheet has <code>latitude</code> instead of <code>lat</code> then the you MUST use <code>data.latitude</code></li> </ul>","title":"Accessing object keys again"},{"location":"week_06/Lab/readme/#adding-buttons-to-our-div","text":"<p>To address the second issue of targeting our <code>div</code>, we need to utilize the JavaScript method of selecting Elements called:</p> <p><code>getElementById()</code></p> <p>Learn more about <code>getElementById()</code></p> <p>Just running the method doesn\u2019t do anything, so we need to store it in a variable:</p> <pre><code>const spaceForButtons = document.getElementById('contents')\n</code></pre>  <p>Remember the <code>appendChild()</code> that adds content? We will use that method to add our button to our <code>spaceForButtons</code> variable that specifies the <code>div</code>:</p> <pre><code>spaceForButtons.appendChild(newButton);\n</code></pre>  <p>The final <code>createButtons()</code> and <code>addMarker()</code> functions should look like this:</p> <pre><code>function addMarker(data){\n        // console.log(data)\n        // these are the names of our lat/long fields in the google sheets:\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n        // adding our create button function\n        createButtons(data.lat,data.lng,data.location)\n        return data.timestamp\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\"); // adds a new button\n    newButton.id = \"button\"+title; // gives the button a unique id\n    newButton.innerHTML = title; // gives the button a title\n    newButton.setAttribute(\"lat\",lat); // sets the latitude \n    newButton.setAttribute(\"lng\",lng); // sets the longitude \n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]); //this is the flyTo from Leaflet\n    })\n    const spaceForButtons = document.getElementById('contents')\n    spaceForButtons.appendChild(newButton);//this adds the button to our page.\n}\n</code></pre>  <p>Horrah!!</p>","title":"Adding buttons to our <code>div</code>"},{"location":"week_06/Lab/readme/#css-grid-time","text":"<p>Ok, now that we got the buttons working, notice how they appear at the bottom?</p> <p></p> <p>This is because we don\u2019t have a space for them in our CSS Grid yet!</p> <p>So time to style our page and make it more presentable!</p> <p>Open up our <code>style.css</code> and find the <code>body</code> selector:</p>  <p>styles/style.css <pre><code>body{\n    display:grid;\n    grid-template-columns: 1fr 1fr; /* this creates an even two column layout*/\n    grid-template-areas: \"mappanel sidepanel\" /* this creates one row with map panel on the left and sidepanel on the right */\n}\n</code></pre>  What do you notice here? Well, we have the <code>1fr 1fr</code> propety value under <code>grid-template-columns</code> property.</p>  <p>Let\u2019s turn to the other two selectors: <pre><code>#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#survey{\n    grid-area: sidepanel;\n} \n</code></pre>  Notice, our poor <code>contents</code> doesn\u2019t have a selector! Let\u2019s fix it by adding this:</p> <pre><code>#contents{\n    /* this gives the name to our area */\n    grid-area: contentpanel;\n}\n</code></pre>  <p><code>grid-area</code> gives the <code>#contents</code> selector the name <code>contentpanel</code> that we will use in the <code>grid-template-areas</code>.</p>","title":"CSS Grid time!"},{"location":"week_06/Lab/readme/#assgining-grid-template-areas","text":"<p>Go back to the <code>body</code> selector, and change the property <code>grid-template-areas</code>\u2018s value to <code>\"mappanel contentpanel\"</code>, which is the name we assigned above:</p> <p><pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr; \n    grid-template-areas: \"mappanel contentpanel\"\n}\n</code></pre>  Try flipping <code>mappanel</code> and <code>contentpanel</code> in the <code>property value</code>, what happens?</p>  Answer  The mappanel showed up on the right-side! Being able to change layouts on-the-fly demonstrates the power of CSS Grid!","title":"Assgining Grid-Template Areas"},{"location":"week_06/Lab/readme/#css-grid-debugging-in-firefox","text":"","title":"CSS Grid Debugging in Firefox"},{"location":"week_06/Lab/readme/#untested-in-chrome-or-safari","text":"<p>In Firefox click on <code>Inspect Element</code> and make sure you are on the <code>Inspector</code>: </p> <p>Click on <code>Layout</code>: </p> <p>Then make sure <code>body</code> and <code>display area names</code> are checked:</p> <p></p> <p>You will notice that the names of the <code>grid areas</code> will display! Very very helpful when debugging CSS Grid!!!</p> <p></p>","title":"(Untested in Chrome or Safari)"},{"location":"week_06/Lab/readme/#home-c-s-stretch-layouts","text":"<p>For the last part of our exercise, the Google survey is going to get in our way because of the <code>iframe</code>\u2018s <code>fixed</code> width and height, we can fix this by applying the following code:</p>  <p>styles/style.css <pre><code>#survey {\n    grid-area: survey;\n    overflow: hidden;\n    /* 16:9 aspect ratio */\n    padding-top: 0%;\n    position: relative;\n}\n\n#survey iframe {\n   border: 0;\n   height: 100%;\n   left: 0;\n   position: absolute;\n   top: 0;\n   width: 100%;\n}\n</code></pre>  Head over to the <code>index.html</code>, let\u2019s add two elements, <code>&lt;header&gt;</code> before the <code>&lt;map&gt;</code> element and <code>&lt;footer&gt;</code> after our <code>&lt;survey&gt;</code> element:</p> <p>index.html <pre><code>&lt;!-- ---- TRUNCATED FOR BREVITY ---- --&gt;\n    &lt;body&gt;\n        &lt;header&gt;Hi I'm AHEADER&lt;/header&gt; &lt;!-- added this--&gt;\n        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;footer&gt;Hi! I'm a FOOTER&lt;/footer&gt; &lt;!-- added this --&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;!-- ----TRUNCATED FOR BREVITY---- --&gt;\n</code></pre> </p>  <p>Return to <code>/styles/style.css</code> and go to the <code>body</code> selector. Then change <code>grid-template-rows</code> to the following: <code>grid-template-rows: 1fr 1fr 1fr 1fr</code>. </p> <p>This creates 4 rows of evenly spaced content.</p> <p>In our <code>grid-template-columns</code> we need one more <code>1fr</code> for our survey in:</p> <p><code>grid-template-columns: 1fr 1fr 1fr</code></p> <p>Finally, we need to add spaces after the <code>\"header\"</code> and <code>\"footer\"</code> template areas too which indicates which row the template is on:</p> <p><code>grid-template-areas: \"header\" \"mappanel contentpanel\" \"footer\"</code></p> <p>The <code>body</code> selector should look like the following:</p>  <p>styles/style.css <pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr; \n    grid-template-rows: 1fr 1fr 1fr 1fr; /* add rows for our header/footer */\n    grid-template-areas: \"header\" \"mappanel contentpanel\" \"footer\"\n}\n</code></pre> </p>","title":"Home C-S-Stretch: Layouts!"},{"location":"week_06/Lab/readme/#class-exericise-2","text":"<p>Add the right CSS selectors to the <code>header</code> and <code>footer</code> elements. </p> <p>Need a hint? These are not <code>div</code> elements!</p>  Answer <pre><code>header{\n    grid-area: header\n}\nfooter{\n    grid-area: footer\n}\n</code></pre>","title":"Class Exericise #2"},{"location":"week_06/Lab/readme/#grid-ception-and-automatically-fitting-content","text":"<p>While named <code>grid-template-areas</code> can be useful, if you have a lot of content, or if the content might grow in number, you can just specify the number that the content should occupy using the <code>grid-column</code> property and <code>repeat</code>. Additionally, we can start a <code>subgrid</code> within a <code>grid</code> element to specify which part of an already existing <code>grid</code> we want to visualize. </p> <ul> <li> <p>More about <code>repeat</code></p> </li> <li> <p>More about <code>subgrid</code></p> </li> </ul> <p>Let\u2019s apply a <code>subgrid</code> and <code>repeated columns</code> of 2 to the <code>#contents</code> selector:</p> <pre><code>#contents{\n    grid-area: contentpanel;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n</code></pre>  <p>This creates a new column after every 2 evenly spaced item!!!</p> <p></p> <p>It even works when you resize the page! </p> <p>So cool!!! </p> <p>Finally, if you turn on the debugger in Firefox, you can see that two grids show up now:</p> <p></p> <p>And there you have it! We\u2019ve only scratched the surface of CSS Grid, but this is enough for you to complete the lab assignment!</p>","title":"Grid-ception and automatically fitting content!"},{"location":"week_06/Lab/readme/#lab-assignment-5-css-grid-layouts","text":"","title":"Lab Assignment #5 - CSS Grid Layouts"},{"location":"week_06/Lab/readme/#due-513","text":"<p>Using your lab assignment from <code>week 5</code>, touch up your mapplication by creating a layout with CSS Grid and making a cohesive webpage.</p> <p>The requirements are: - A title for the webpage describing what is being shown - Design a responsive-layout using CSS Grid - Use a sub-grid (grid-within-a-grid) - Utilize <code>buttons</code> or <code>divs</code> to interact with your map (Revisit Lab #3 for more info)</p>","title":"Due 5/13"},{"location":"week_06/Lab/readme/#extra-resources","text":"<ul> <li> <p>MDN CSS Grid Guides</p> </li> <li> <p>CSS Grid Starter Layouts</p> </li> <li> <p>CSS Grid Styling</p> </li> </ul>","title":"Extra Resources:"},{"location":"week_06/Lab/readme/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_06</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_06/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #5: </li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/143</li> </ul>","title":"Submission"},{"location":"week_06/Materials/pre-lab/","text":"","title":"Pre-lab"},{"location":"week_06/Materials/pre-lab/#due-before-lab-on-56","text":"<p>25 - 30 mins </p> <p>Read the following MDN articles on CSS and CSS Grid before lab. Don\u2019t worry if you are confused by CSS Grid, we will talk more about it in lab, I just want you to be familiar with CSS Grid before lab starts.</p> <ul> <li> <p>MDN CSS Basics 11-14 minutes</p> </li> <li> <p>MDN CSS Grid 14-18 minutes</p> </li> </ul>","title":"Due before lab on 5/6"},{"location":"week_07/readme/","text":"","title":"Week 7 - From Design to Data Justice"},{"location":"week_07/readme/#lecture","text":"<ul> <li>From Design to Data Justice</li> </ul>","title":"Lecture"},{"location":"week_07/readme/#lab","text":"<ul> <li>Map Layers and Visual Design</li> </ul>","title":"Lab"},{"location":"week_07/readme/#assignments","text":"","title":"Assignments"},{"location":"week_07/readme/#due-thursday-513","text":"<ul> <li>Lab Assignment #5</li> </ul>","title":"Due Thursday 5/13:"},{"location":"week_07/readme/#due-tuesday-518","text":"<ul> <li>Thinking Cap #7</li> </ul>","title":"Due Tuesday 5/18:"},{"location":"week_07/readme/#due-thursday-520","text":"<ul> <li>Lab Assignment #6</li> </ul>","title":"Due Thursday 5/20:"},{"location":"week_07/readme/#readings","text":"<ol> <li>Dencik, L., Redden, J., and Trer\u00e9, E. (2019) Exploring Data Justice: Conceptions, Applications and Directions</li> </ol>","title":"Readings:"},{"location":"week_07/Lab/lab_assignment/","text":"","title":"Lab Assignment #6 - Conditional Visual Importance"},{"location":"week_07/Lab/lab_assignment/#due-520","text":"<p>Using your assignment from <code>week 6</code>, categorize your survey data to convey a message or theme about your map.</p> <p>The requirements are: - Use at least 2 different layer groups. - Use a conditional <code>if-else</code> statement - Customize Leaflet\u2019s <code>circle markers</code> - Add a title or a explanation that describes what is being shown</p>","title":"Due 5/20"},{"location":"week_07/Lab/lab_assignment/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_07</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_07/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #6: </li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/148</li> </ul>","title":"Submission"},{"location":"week_07/Lab/readme/","text":"","title":"Map Layers and Visual Design"},{"location":"week_07/Lab/readme/#objectives","text":"<ul> <li>Use conditional statements to add content into Leaflet <code>FeatureGroups</code></li> <li>Use Leaflet\u2019s <code>circleMarkers</code> to visualize points</li> <li>Change the basemap for our maps</li> </ul> <p>Today we will focus on styling our map through the use of Leaflet <code>Feature groups</code>, which means more JavaScript!</p> <p><code>Feature groups</code> are like boxes that you can use to group your map content. For this lab we will be creating two layers for our survey question of <code>Do you speak English fluently?</code></p> <p>One group will be for <code>yes</code> and another group for <code>no</code>.</p>","title":"Objectives:"},{"location":"week_07/Lab/readme/#our-goal-today","text":"<p></p>","title":"Our goal today:"},{"location":"week_07/Lab/readme/#setup","text":"<p>Start by creating a <code>week_6</code> folder in your assignments repo.</p>","title":"Setup"},{"location":"week_07/Lab/readme/#optional-if-you-want-to-work-with-your-own-layout-you-can-copy-the-contents-of-your-week_5-folder-and-skip-the-following-setup-section","text":"","title":"Optional: If you want to work with your own layout, you can copy the contents of your <code>week_5</code> folder and skip the following setup section."},{"location":"week_07/Lab/readme/#boiler-plate-code","text":"<p>Create the following files:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;COVID-19 Vaccination Stories&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n     &lt;body&gt;\n        &lt;header&gt;Welcome to COVID-19 Vaccination Stories&lt;/header&gt;\n        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\nfunction addMarker(data){\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n    createButtons(data.lat,data.lng,data.location)\n    return data.timestamp\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\");\n    newButton.id = \"button\"+title;\n    newButton.innerHTML = title;\n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng);\n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]);\n    })\n    const spaceForButtons = document.getElementById('contents')\n    spaceForButtons.appendChild(newButton);\n}\n\nfunction formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)        \n}\n</code></pre> </p> <p>styles/style.css <pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr; \n    grid-auto-rows: minmax(5px, auto);\n    grid-template-areas: \"header header\" \"mappanel sidebar\" \n}\n\nheader{\n    grid-area: header;\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#contents{\n    grid-area: sidebar;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n\n/* fix for survey to fit in the iframe */\n#survey {\n    overflow: hidden;\n    /* 16:9 aspect ratio */\n    padding-top: 0%;\n    position: relative;\n}\n\n#survey iframe {\n   border: 0;\n   height: 100%;\n   left: 0;\n   position: absolute;\n   top: 0;\n   width: 100%;\n}\n</code></pre> </p>","title":"Boiler Plate code"},{"location":"week_07/Lab/readme/#if-else-conditional-statements","text":"<p>Conditional statements are important for being able to tell our code to do or not do something. The syntax for <code>if-else</code> statments are similar to <code>for-loop</code> in that they look like this:</p> <p><pre><code>const hello = \"hi\"\nif (hello){\n    // do something\n    // optional: return something\n} \n</code></pre>  The <code>if</code> is a keyword that evalutes the condition within the <code>()</code>.  There are different ways to set <code>conditions</code> inside the <code>()</code>, but it must has to either be <code>true</code> or <code>false</code>. </p> <p>Here are some examples:</p>    Example Meaning     <code>if(variable)</code> Does this <code>variable</code> exist?   <code>if(variable == \"yes\")</code> Does this <code>variable</code> equal to \u201cyes\u201d   <code>if(variable != \"yEs\")</code> Does this <code>variable</code> NOT equal \u201cyEs\u201d   <code>if(variable &gt; 10 )</code> Is this <code>variable</code> greater than 10?   <code>if(variable == false)</code> Is this <code>variable</code> false?   <code>if(variable == null)</code> Is this <code>variable</code> null?   <code>if(variable == anotherVariable)</code> Is this <code>variable</code> the same as another variable?   <code>if(variable &gt; 1 &amp;&amp; variable &lt; 10)</code> Is this <code>variable</code> greater than 1 AND is <code>variable</code> less than 10?    <p>You can check this MDN article on <code>truthy</code> and <code>falsy</code> for more examples:</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Glossary/Truthy</li> <li>https://developer.mozilla.org/en-US/docs/Glossary/Falsy</li> </ul> <p>The <code>&amp;&amp;</code> is a logical <code>AND</code> operator where all statements have to be <code>True</code> in order to be statisfied.</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND</li> </ul>","title":"<code>if-else</code> Conditional Statements"},{"location":"week_07/Lab/readme/#great-what-else-is-there","text":"<p><code>else</code> acts like a default in case the <code>if</code> condition never is true: <pre><code>const hi = \"uh oh!\"\nif (hello &amp;&amp; hi){\n    // do something IF `hello` and `hi` exist\n}\nelse {\n    // do something else\n}\n</code></pre> </p>","title":"Great, what <code>else</code> is there?"},{"location":"week_07/Lab/readme/#class-exercise-1-lets-see-if-you-get-the-idea","text":"<p>Create an <code>if-else</code>statement for the dataset in your mapplication within the <code>addMarker()</code> function to only add markers when a certain condition exists:</p> <pre><code>function addMarker(data){\n    L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;${data.timestamp}&lt;/h2&gt;`)\n    createButtons(data.lat,data.lng,data.location)\n    return data.timestamp\n}\n</code></pre>  <p>If you are using the lab dataset, filter out answers to the question<code>\"Do you speak English fluently?\"</code></p> <p>Bonus: Can you use an <code>else</code> statement to show the number of those who speak other languages?</p>  Answer <pre><code>function addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Speaks English fluently&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.location)\n    }\n    else{\n        L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`)\n        createButtons(data.lat,data.lng,data.location)   \n        // Bonus:    \n        // speakOtherLanguage += 1\n    }\n    return data.timestamp\n}\n// let speakOtherLanguage = 0\n//window.onload = function afterWebPageLoad() { \n    //document.body.append(\"Number of hidden records:\"+speakOtherLanguage)\n</code></pre>","title":"Class Exercise #1: Let\u2019s see <code>IF</code> you get the idea!"},{"location":"week_07/Lab/readme/#leaflet-featuregroups","text":"<p>A <code>feature group</code>, which is Leaflet\u2019s container for dealing with multiple groups of data layers.</p> <p>In our <code>js/init.js</code> file we will add some variables to store our groups in:  <pre><code>let speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n</code></pre>   Important!!! These variables have to be OUTSIDE the function, because <code>Leaflet</code> needs to be able to use them. A variable outside of a function is said to be in the <code>global scope</code>.</p> <p>Next we will need to change our <code>addMarker</code> function to add each marker to their respective groups instead of just directly onto the map:</p> <p><pre><code>// our Leaflet feature group layers waiting for content!\nlet speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        speakFluentEnglish.addLayer(L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        speakOtherLanguage.addLayer(L.marker([data.lat,data.lng]).addTo(map).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n</code></pre>  Awesome! Now let\u2019s see our beautiful layers!</p> <p>We also need to delete the line <code>.addTo(map)</code> after each marker, because we will add the <code>featureGroup</code> to the map instead of individual markers:</p> <pre><code>// our Leaflet feature group layers waiting for content!\nlet speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        speakFluentEnglish.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        speakOtherLanguage.addLayer(L.marker([data.lat,data.lng]).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n</code></pre>  <p>Wait\u2026 our markers dispearred after we did that, why?</p>  Answer Since we removed `addTo(map)`, we now need to add the `group layers` to to map!!","title":"Leaflet <code>featureGroups</code>"},{"location":"week_07/Lab/readme/#adding-our-group-layers-to-the-leaflet-map","text":"<p>As alluded to in the answer above, we need to add the groupped layers to our Leaflet map. To do so, we need to add this code somewhere:</p> <pre><code>speakFluentEnglish.addTo(map)\nspeakOtherLanguage.addTo(map)\n</code></pre>  <p>But where?</p> <p>If you answered, at the end of the <code>formatData</code> function, you are correct (and sneaky if you read ahead during the lab!)!</p> <pre><code>function formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)\n        speakFluentEnglish.addTo(map) // add our layers after markers have been made\n        speakOtherLanguage.addTo(map) // add our layers after markers have been made  \n}\n</code></pre>","title":"Adding our <code>group layers</code> to the <code>Leaflet</code> map"},{"location":"week_07/Lab/readme/#why","text":"<p>We have to add our layers after the <code>forEach</code> loop finishes, otherwise the code will run only for the first marker.</p>","title":"Why?"},{"location":"week_07/Lab/readme/#layer-controls","text":"<p>One big benefit of using Leaflet FeatureGroups is that we can add <code>controls</code> to the map which allows us to turn on and off layers.</p> <p>Let\u2019s add our list of layers as an <code>object</code>: <pre><code>// define layers\nlet layers = {\n    \"Speaks English\": speakFluentEnglish,\n    \"Speaks Other Languages\": speakOtherLanguage\n}\n</code></pre>  The first property name is our <code>alias</code> or what the users will see, and the property key is the Leaflet <code>FeatureGroup</code> that we created earlier.</p> <p>Next we will add a Leaflet <code>controlGroup</code>:</p> <p><pre><code>// add layer control box\nL.control.layers(null,layers).addTo(map)\n</code></pre>  You can actually turn on and off layers using buttons outside of Leaflet controls by creating a function to add and remove layers.</p> <p>We can also add a <code>fitBounds</code> to our layers to make sure our map zooms into our layer: <pre><code>// make the map zoom to the extent of markers\nmap.fitBounds(speakOtherLanguage.getBounds());\n</code></pre> </p> <p>Hmm, that only works for one layer group, so let\u2019s create a new feature group that contains all of our layers:</p> <p><pre><code>let allLayers = L.featureGroup([speakFluentEnglish,speakOtherLanguage]);\nmap.fitBounds(allLayers.getBounds());     \n</code></pre>  That code should go at the end of our <code>formatData</code> function so it fits all of our layers and markers.</p> <p>Our <code>formatData</code> function should look like the following:</p> <pre><code>function formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)\n        speakFluentEnglish.addTo(map) // add our layers after markers have been made\n        speakOtherLanguage.addTo(map) // add our layers after markers have been made  \n        let allLayers = L.featureGroup([speakFluentEnglish,speakOtherLanguage]);\n        map.fitBounds(allLayers.getBounds());\n}\n</code></pre>","title":"Layer Controls"},{"location":"week_07/Lab/readme/#refactoring","text":"<p>Do you think there\u2019s a better way for us to create the feature groups instead of adding all this code in our <code>formatData</code> function?</p>  Answer Yes, we should make a function to add each of the layers!  <p>Due to lack of time, we won\u2019t do any refactoring, so for now we will leave the inefficient way of repeating ourselves with the various <code>featureGroups</code>. But we must <code>refactor</code> our code if we want to add our own buttons to interact with the map instead of using the default Leaflet <code>control</code> functions.</p>","title":"Refactoring"},{"location":"week_07/Lab/readme/#what-is-refactoring","text":"<p>Refactoring code is means improving code so that it is easier to understand and easier to reuse. Refactoring is important because the less we repeat ourselves or hardcode things the less mistakes our code will have when we modify it.</p>  How would you refactor this code? To refactor the `group layers` code you want to do the following:  1. Create an array of `layers` 2. Create a new `function` that adds layers to the map 3. Add the markers before the `if` statments and only change what needs to be altered in the pop-ups depending on the field. 4. Finally, use a `forEach` method that calls our new function    <p>Now that we have the pop-up change based on our fields, let\u2019s actually change how the marker looks!</p>","title":"What is refactoring?"},{"location":"week_07/Lab/readme/#time-to-leaflet-the-markers-go-and-use-circlemarkers","text":"<p>The <code>blue</code> Leaflet markers are pretty iconic to us now (pun intended). While we can change the markers to other icons, instead we will use <code>circle markers</code> because this allows us to have nice colorful markers without finding icons.</p>","title":"Time to Leaflet the <code>markers</code> go, and use <code>circleMarkers!</code>:"},{"location":"week_07/Lab/readme/#adding-circlemarkers","text":"<p>The format for adding <code>circleMarkers</code> in <code>Leaflet</code> looks like this:</p> <p><code>L.circleMarker(&lt;LatLng&gt;, &lt;CircleMarker options&gt;)</code></p> <p>The <code>latlng</code> is pretty familiar now, but the options for circleMarkers are a bit unexplored. <pre><code>let circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n</code></pre> </p> <p>Add the above <code>circleOptions</code> above our <code>addMarker</code> function and change the <code>marker</code> to <code>circleMarker</code> as follows: <pre><code>let circleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        speakFluentEnglish.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        speakOtherLanguage.addLayer(L.circleMarker([data.lat,data.lng],circleOptions).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n</code></pre>  Awesome! We got <code>circleMarkers</code>! But wait.. They are all the same..</p> <p>Now this is where we need to: 1. Be intentional in our design and choose colors to represent well. 2. Change the colors based on our <code>if-else</code> statement</p> <p>Let\u2019s make <code>green</code> for <code>Yes</code> and <code>red</code> for <code>No</code>.</p> <p>Since <code>circleOptions</code> is an object, we can change it\u2019s property value for <code>fillColor</code> when we are in the <code>if-else</code> statement.</p> <p>This should go in the <code>if(data.doyouspeakenglishfluently == \"Yes\")</code> scope: <pre><code>circleOptions.fillColor = \"green\"\n</code></pre>  And this should go in the <code>else</code> scope: <pre><code>circleOptions.color = \"red\"\n</code></pre> </p> <p>Your final colorful <code>addMarker</code> function should look like this: <pre><code>function addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        exampleOptions.fillColor = \"green\"\n        speakFluentEnglish.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        speakOtherLanguage.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n</code></pre> </p> <p>Phew! That was a lot to go over! But now you should take sometime to think about the design choices we have to make as map makers. One important consideration is deciding on which basemap to use.</p> <p>Recall the code here:</p> <p><pre><code>L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n</code></pre>  Go to: - https://leaflet-extras.github.io/leaflet-providers/preview/ And pick a basemap that you like, a simple basemap with few colors is always preferred over a busy basemap:</p> <p>Busy</p> <p></p> <p>Less busy</p> <p></p> <p>Click on the basemap you prefer:</p> <p></p> <p>Copy the <code>plain JavaScript</code> in the middle: </p> <p>And put the code after <code>map</code> in your <code>js/init.js</code> file:</p> <p><pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n}).addTo(map);\n</code></pre>  Change the <code>var</code> to <code>let</code> and be sure to add the <code>variable</code> to your map, like so: <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\n// L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//     attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n// }).addTo(map);\n</code></pre>  Be sure to delete or comment out the other basemap, as you don\u2019t need two basemaps!</p>","title":"Adding circleMarkers"},{"location":"week_07/Lab/readme/#final-code","text":"<p>Your final code should look like the following:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;COVID-19 Vaccination Stories&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n     &lt;body&gt;\n        &lt;header&gt;Welcome to COVID-19 Vaccination Stories&lt;/header&gt;\n        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>  styles/style.css <pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr; \n    grid-auto-rows: minmax(5px, auto);\n    grid-template-areas: \"header header\" \"mappanel sidebar\" \n}\n\nheader{\n    grid-area: header;\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#contents{\n    grid-area: sidebar;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n\n/* fix for survey to fit in the iframe */\n#survey {\n    overflow: hidden;\n    /* 16:9 aspect ratio */\n    padding-top: 0%;\n    position: relative;\n}\n\n#survey iframe {\n   border: 0;\n   height: 100%;\n   left: 0;\n   position: absolute;\n   top: 0;\n   width: 100%;\n}\n</code></pre> </p> <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\n// L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//     attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n// }).addTo(map);\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\nlet speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n\nlet exampleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        exampleOptions.fillColor = \"green\"\n        speakFluentEnglish.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        exampleOptions.fillColor = \"red\"\n        speakOtherLanguage.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\");\n    newButton.id = \"button\"+title;\n    newButton.innerHTML = title;\n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng);\n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]);\n    })\n    const spaceForButtons = document.getElementById('contents')\n    spaceForButtons.appendChild(newButton);\n}\n\nfunction formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)\n        speakFluentEnglish.addTo(map)\n        speakOtherLanguage.addTo(map)\n        let allLayers = L.featureGroup([speakFluentEnglish,speakOtherLanguage]);\n        map.fitBounds(allLayers.getBounds());        \n}\n\nlet layers = {\n    \"Speaks English\": speakFluentEnglish,\n    \"Speaks Other Languages\": speakOtherLanguage\n}\n\nL.control.layers(null,layers).addTo(map)\n</code></pre> </p>  <p>Alright! Now you should be ready to take on the lab assignment for the week!</p>","title":"Final Code"},{"location":"week_07/Lab/readme/#lab-assignment-6-conditional-visual-importance","text":"","title":"Lab Assignment #6 - Conditional Visual Importance"},{"location":"week_07/Lab/readme/#due-520","text":"<p>Using your assignment from <code>week 6</code>, categorize your survey data to convey a message or theme about your map.</p> <p>The requirements are: - Use at least 2 different layer groups. - Use a conditional <code>if-else</code> statement - Customize Leaflet\u2019s <code>circle markers</code> - Add a title or a explanation that describes what is being shown</p>","title":"Due 5/20"},{"location":"week_07/Lab/readme/#submission","text":"<ul> <li>Commit your changes to GitHub</li> <li>Find your <code>index.html</code> in the <code>Week_07</code> folder and copy the URL. It should look something like this:</li> <li>https://albertkun.github.io/21S-ASIAAM-191A-Assignments/Week_07/index.html</li> <li>Paste your link as a comment in the Discussion forum for Lab Assignment #6: </li> <li>https://github.com/albertkun/21S-ASIAAM-191A/discussions/148</li> </ul>","title":"Submission"},{"location":"week_08/readme/","text":"","title":"Week 8 - Collaboration and mentoring for social change"},{"location":"week_08/readme/#lecture","text":"<ul> <li>Social Change as Mentorship and Collaboration</li> </ul>","title":"Lecture"},{"location":"week_08/readme/#lab","text":"<ul> <li>Collaborating with GitHub and Plugins</li> <li>Lab 8 Slides</li> </ul>","title":"Lab"},{"location":"week_08/readme/#visiting-voices-lucy-shen","text":"<p></p> <p>Lucy Shen, was a candidate for ADEM District 25 and previous contender for FUSD School Board, As a youth mentor with StandUp for Kids, Girls Who Code, and Spark, Lucy empowered students from at-risk and minority communities.</p>","title":"Visiting Voices: Lucy Shen"},{"location":"week_08/readme/#assignments","text":"","title":"Assignments"},{"location":"week_08/readme/#due-thursday-520","text":"<ul> <li>Lab Assignment #6</li> <li>Pre-lab</li> <li>In-Class Thinking Cap</li> <li>Survey final drafts via email or inputted via this spreadsheet.</li> </ul>","title":"Due Thursday 5/20:"},{"location":"week_08/readme/#due-thursday-527","text":"<ul> <li>Group Assignment #5</li> </ul>","title":"Due Thursday 5/27:"},{"location":"week_08/Materials/groupassignment/","text":"","title":"Group Assignment #5 - Rough Draft"},{"location":"week_08/Materials/groupassignment/#due-527","text":"<p>Create a functional (doesn\u2019t have to be pretty or clean) version of your mapplication using the survey from students in class. </p> <p>This assignment will be graded on the following: 1. Fulfillment of the user stories set forth in the memo 2. Relevant functionality that is specific to empowering community voices 3. A <code>readme.md</code> for the repository that describes the technology used for the project and how others could use it in the future 4. A short 2-minute presentation</p>","title":"Due 5/27"},{"location":"week_08/Materials/groupassignment/#presentation-2-3-minutes-total","text":"<ol> <li>Who is the project for and why is it important?</li> <li>How does the website empower people?</li> <li>What changes you would like to focus on between now and the final? Why?</li> </ol> <p>Everyone is required to speak.</p>","title":"Presentation (2-3 minutes total)"},{"location":"week_08/Materials/groupassignment/#technical-requirements","text":"<ul> <li>A map is required</li> <li>Usage of survey responses is required</li> <li>Please come up with a unique name for your group</li> </ul>","title":"Technical Requirements:"},{"location":"week_08/Materials/groupassignment/#submission","text":"<p>Post your group\u2019s repository and website link in this assignment thread: https://github.com/albertkun/21S-ASIAAM-191A/discussions/150</p>","title":"Submission"},{"location":"week_08/Materials/pre-lab/","text":"<p>Read the following explanations about GitHub before lab: - Understanding Git\u2019s Flow https://guides.github.com/introduction/flow/ (5 min) - Git Branching and Merging Made Easy(6 mins) - Pull Requests (6-7 mins)</p>","title":"Pre lab"},{"location":"week_08/Materials/pre-lab/#final-project-ideas","text":"<p>Check the following websites: - Visit turf.js - StoryMap Example from our Textbook - Leaflet Plugins</p>","title":"Final Project ideas"},{"location":"week_08/Materials/pre-lab/#optional-readings","text":"<ul> <li>Dangit, git! Fixing Git mistakes in plain English</li> <li>Making good meaningful commit messages!</li> </ul>","title":"Optional Readings:"},{"location":"week_08/lab/readme/","text":"","title":"Collaborating with GitHub and Plugins"},{"location":"week_08/lab/readme/#objectives","text":"<ul> <li>Clone a new repository</li> <li>Create a new branch</li> <li>Try adding a JavaScript plugin</li> <li>Create a pull request</li> </ul>","title":"Objectives:"},{"location":"week_08/lab/readme/#clone-or-create-a-new-repo","text":"<p>Start by cloning this repo: <pre><code>git clone https://github.com/albertkun/21S-AA191-GitPracticing.git\n</code></pre> </p> <p>Remember, here is the basic git commands for adding new changes:</p> <pre><code>git add .\ngit commit -am \"message\"\ngit push\n</code></pre>  <p>Refer to this medium post for a refresher on git merges</p>","title":"Clone or create a new repo:"},{"location":"week_08/lab/readme/#making-a-new-branch","text":"<p><pre><code>git checkout -b helloNewBranch\n</code></pre>  This creates a branch called <code>helloNewBranch</code> and switches to it!</p>","title":"Making a new branch:"},{"location":"week_08/lab/readme/#git-add-your-changes-to-the-new-branch","text":"<p>Make some changes and add them to the branch: <pre><code>git add .\n</code></pre> </p>","title":"<code>git add .</code> your changes to the new branch:"},{"location":"week_08/lab/readme/#add-a-message-to-your-commit","text":"<pre><code>git commit -am \"message\"\n</code></pre>","title":"Add a message to your commit"},{"location":"week_08/lab/readme/#push-your-changes-to-your-new-branch","text":"<p>This code creates a new branch called <code>helloNewBranch</code> on GitHub to push to: <pre><code>git push --set-upstream origin helloNewBranch\n</code></pre>  You only need to run it when the branch DOES NOT exist on GitHub!!! After the branch is on GitHub, use <code>git push</code>: <pre><code>git push\n</code></pre> </p>","title":"Push your changes to your new branch"},{"location":"week_08/lab/readme/#updating-your-branch","text":"<p>Sometimes you want to make sure your branch is up to date, so you can use the following command: <pre><code>git merge &lt;branch_you_want_to_merge&gt;\n</code></pre>  For example this command will <code>merge</code> content from <code>main</code> to the branch I am currently on: <pre><code>git merge main\n</code></pre>  However!!!</p> <p>What happens when a <code>git push</code> affects in a file that was changed locally but someone else edited on GitHub?</p>","title":"Updating your branch"},{"location":"week_08/lab/readme/#merge-conflicts","text":"<p>A <code>merge conflict</code> occurs when one file was changed in two places. For example, Person A edits line 1 of <code>readme.md</code> and <code>Person B</code> also edits line 1 of <code>readme.md</code>. A <code>git</code> doesn\u2019t know which changes to keep, so a person needs to take a look and manually <code>merge</code> them.</p> <p>First, do a <code>git pull</code> which will check if you are behind a commit:</p> <pre><code>git pull\n</code></pre>  <p>When your commit is behind, you may receive this message: <pre><code>error: Your local changes to the following files would be overwritten by merge:\n        **SOME FILE(S)**\nPlease commit your changes or stash them before you merge.\nAborting\nUpdating 6ac38e2..4dbc13c\n</code></pre> </p> <p>Do a git commit:</p> <p><pre><code>git add .\ngit commit -am \"message\"\ngit push\n</code></pre>  After you try to push, this message should pop-up:</p> <p><pre><code>error: failed to push some refs to 'https://github.com/albertkun/21S-AA191-GitPracticing.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.```\n</code></pre>  Run another <code>git pull</code> <pre><code>git pull\n</code></pre>  If files didn\u2019t change at the same time, then auto-merging could take place.</p> <p>Then proceed to push as normal: <pre><code>git push\n</code></pre>  If files did change at the same time, you have to choose which version to keep:</p> <p></p> <p>After choosing an option, you can can push as normal:</p> <pre><code>git push\n</code></pre>  <p>With a better understanding of <code>branches</code> and <code>merge conflicts</code>, now we can go ahead and test some new features without worrying about blowing up our repository!</p>","title":"Merge Conflicts!!!"},{"location":"week_08/lab/readme/#adding-a-new-javascript-plugin","text":"<p>Remember last week when we added new basemaps? </p> <p>Taking that one step further we can add brand-new functionality to our maps.</p> <p>While the Leaflet provider is a plug-in of basemaps for Leaflet, there are many plugins that we can use to add extra functionality to our mapplication in JavaScript as well. Here are some examples:</p>","title":"Adding a new JavaScript Plugin"},{"location":"week_08/lab/readme/#visualizations","text":"<ul> <li>Turf.js</li> <li>Charts</li> </ul>","title":"Visualizations:"},{"location":"week_08/lab/readme/#functions","text":"<ul> <li>Scrollama</li> </ul>","title":"Functions:"},{"location":"week_08/lab/readme/#leaflet-related","text":"<ul> <li>Leaflet Plugins</li> <li>Leaflet Cluster Markers</li> </ul> <p>To keep things simple, we will add a cluster marker functionality to our Leaflet map. Clustering makes it easier to see when multiple points are in the same area.</p> <p>With just a few changes our map will look as follows: </p> <p>As with when we first used Leaflet we need to include the library, so in our html add the following lines:</p>  <p>index.html <pre><code>        &lt;!-- Cluster Marker's CSS --&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css\" /&gt;\n        &lt;!-- Cluster Marker's JavaScript --&gt;\n        &lt;script src=\"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js\"&gt;&lt;/script&gt;\n</code></pre> </p>  <p>Next, let\u2019s read the documentation on how to use the <code>cluster maker</code>:</p> <p></p> <p>Judging from this code, we might be able to simply change our group layers for the markers!</p> <p>Head over to our <code>init.js</code> file and find the following lines for our group layers:</p>  <p>js/init.js <pre><code>let speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n</code></pre> </p>  <p>Change it to:</p>  <p>js/init.js <pre><code>let speakFluentEnglish = L.markerClusterGroup();\nlet speakOtherLanguage = L.markerClusterGroup();\n</code></pre> </p>  <p>And\u2026 wow that\u2019s it!</p> <p>This flexibility is what makes opensource tools and plugins so great! However, be warned that not all plugins will be as simple to plug and play.</p> <p>Congrats!</p> <p>After you\u2019ve made this change the time has come to make a pull request!</p>","title":"Leaflet Related:"},{"location":"week_08/lab/readme/#pull-requests","text":"<p>I\u2019m sure you\u2019ve seen this nagging icon a lot by now: </p> <p>You will then be greeted by a new page where you can title, assign, comment, etc. about the pull request (or PR): </p> <p>and most importantly create a <code>pull request</code>:  After clicking the button to <code>create a new pull request</code> scroll down to the resulting page: </p> <p>You should be able to click on <code>merge</code> if your <code>pull request</code> has no <code>merge conflicts</code>: </p> <p>Click to <code>confirm</code> the auto merge: </p> <p>And now you can delete the branch: </p>","title":"Pull Requests"},{"location":"week_08/lab/readme/#warning-merge-conflicts-do-not-allow-you-to-auto-merge-a-pull-request","text":"<p>You will be unable to <code>auto-merge</code> if there is a merge conflict, so refer to the <code>merge-conflict</code> steps in order to finish the <code>pull request</code>.</p>","title":"Warning: Merge Conflicts do not allow you to auto-merge a Pull Request!"},{"location":"week_08/lab/readme/#completed-pull-request","text":"<p>Your completed pull request should look like the following: </p> <p>Congrats on finishing the lab! There is no assignment, so you can focus on the Group Assignment #5 due next week.</p>","title":"Completed Pull Request"},{"location":"week_08/lab/readme/#group-assignment-5-rough-draft","text":"<p>Create a functional (doesn\u2019t have to be pretty or clean) version of your mapplication using the survey from students in class. </p> <p>This assignment will be graded on the following: 1. Fulfillment of the user stories set forth in the memo 2. Relevant functionality that is specific to empowering community voices 3. A <code>readme.md</code> for the repository that describes the technology used for the project and how others could use it in the future 4. A short 2-minute presentation answering:    1. Who is the project for and why is it important?    2. How does the website empower people?    3. What changes you would like to focus on between now and the final? Why?</p> <p>Everyone is required to speak.</p>","title":"Group Assignment #5 - Rough Draft"},{"location":"week_08/lab/readme/#technical-requirements","text":"<ul> <li>A map is required</li> <li>Usage of survey responses is required</li> <li>Please come up with a unique name for your group</li> </ul>","title":"Technical Requirements:"},{"location":"week_08/lab/readme/#submission","text":"<p>Post your group\u2019s repository in this assignment thread: https://github.com/albertkun/21S-ASIAAM-191A/discussions/150</p>","title":"Submission"},{"location":"week_09/readme/","text":"","title":"Week 9 - Connecting Activism, Technology, and Social Change"},{"location":"week_09/readme/#lecture","text":"<ul> <li>Building and Sustaining Connections with Civil Society</li> </ul>","title":"Lecture"},{"location":"week_09/readme/#visiting-voices-rapi-castillo","text":"<p></p> <p>Rapi Castillo is a tech worker, community organizer, and (amateur) baker. He is laser-focused on creating technology that empower people to learn more about the issues and do something impactful. He has worked on projects that have been used by grassroots campaigns like Alexandria Ocasio Cortez, Bernie Sanders, and others. He is also the founder of Progressive Coders Network.</p>","title":"Visiting Voices: Rapi Castillo"},{"location":"week_09/readme/#assignments","text":"","title":"Assignments"},{"location":"week_09/readme/#due-thursday-527","text":"<ul> <li>Group Assignment #5</li> </ul>","title":"Due Thursday 5/27:"},{"location":"week_09/readme/#due-thursday-63","text":"<ul> <li>Final Thinking Cap</li> </ul>","title":"Due Thursday 6/3:"},{"location":"week_09/readme/#due-thursday-610","text":"<ul> <li>Final Group Assignment</li> </ul>","title":"Due Thursday 6/10:"},{"location":"week_10/readme/","text":"","title":"Week 10 - Beyond Web Development and GIS for Social Change"},{"location":"week_10/readme/#lab","text":"<ul> <li>Final Finishing Touches</li> </ul>","title":"Lab"},{"location":"week_10/readme/#lecture","text":"<ul> <li>Beyond Web Development and GIS for Social Change</li> </ul>","title":"Lecture"},{"location":"week_10/readme/#assignment","text":"","title":"Assignment"},{"location":"week_10/readme/#due-thursday-610","text":"<ul> <li>Final Group Assignment</li> </ul>","title":"Due Thursday 6/10:"},{"location":"week_10/Lab/readme/","text":"","title":"Final Finishing Touches"},{"location":"week_10/Lab/readme/#objectives","text":"<ul> <li>Touch up our map with a legend</li> <li>Revisiting legendary CSS Grid</li> <li>Final Tech Tips</li> <li>Check out JavaScript Libraries<ul> <li>turf.js</li> <li>chart.js</li> </ul> </li> <li>Manipulate geospatial data with:<ul> <li>geojson.io</li> <li>MapShaper</li> </ul> </li> <li>Add a new Leaflet plugins</li> <li>In-class Group(!) Assignment</li> </ul> <p></p>","title":"Objectives:"},{"location":"week_10/Lab/readme/#setup","text":"<p>Start by creating a <code>week_10</code> folder in your assignments repo.</p>","title":"Setup"},{"location":"week_10/Lab/readme/#boiler-plate-code","text":"<p>Create the following files:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;COVID-19 Vaccination Stories&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n     &lt;body&gt;\n        &lt;header&gt;Welcome to COVID-19 Vaccination Stories&lt;/header&gt;\n        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\n// L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n//     attribution: '&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n// }).addTo(map);\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\nlet speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n\nlet exampleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        exampleOptions.fillColor = \"green\"\n        speakFluentEnglish.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        exampleOptions.fillColor = \"red\"\n        speakOtherLanguage.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\");\n    newButton.id = \"button\"+title;\n    newButton.innerHTML = title;\n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng);\n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]);\n    })\n    const spaceForButtons = document.getElementById('contents')\n    spaceForButtons.appendChild(newButton);\n}\n\nfunction formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)\n        speakFluentEnglish.addTo(map)\n        speakOtherLanguage.addTo(map)\n        let allLayers = L.featureGroup([speakFluentEnglish,speakOtherLanguage]);\n        map.fitBounds(allLayers.getBounds());        \n}\n\nlet layers = {\n    \"Speaks English\": speakFluentEnglish,\n    \"Speaks Other Languages\": speakOtherLanguage\n}\n\nL.control.layers(null,layers).addTo(map)\n</code></pre>  styles/style.css <pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr; \n    grid-auto-rows: minmax(5px, auto);\n    grid-template-areas: \"header header\" \"mappanel sidebar\" \n}\n\nheader{\n    grid-area: header;\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n} \n\n#contents{\n    grid-area: sidebar;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n\n/* fix for survey to fit in the iframe */\n#survey {\n    overflow: hidden;\n    /* 16:9 aspect ratio */\n    padding-top: 0%;\n    position: relative;\n}\n\n#survey iframe {\n   border: 0;\n   height: 100%;\n   left: 0;\n   position: absolute;\n   top: 0;\n   width: 100%;\n}\n</code></pre> </p>","title":"Boiler Plate code"},{"location":"week_10/Lab/readme/#legendary-additions","text":"<p>Let\u2019s start by making our legend not collapsable:</p> <p>Change the <code>L.control.layers(null,layers).addTo(map)</code> to: <pre><code>L.control.layers(null,layers,{collapsed:false}).addTo(map)\n</code></pre>  We can do better though and add an actual legend. Notice the <code>let layers ={}</code> object right above the <code>L.control</code> that we changed. The properties in there <code>Speaks English</code> and <code>Speaks Other Language</code> are actually HTML content that controls how the layers are displayed.</p> <p>We will add a <code>&lt;svg&gt;</code> which is an <code>svg</code> element.  Our <code>layers</code> object should look like the following: <pre><code>let layers = {\n    \"Speaks English &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='green' /&gt;&lt;/svg&gt;\": speakFluentEnglish,\n    \"Speaks Other Languages &lt;svg height='10' width='10'&gt;&lt;circle cx='5' cy='5' r='4' stroke='black' stroke-width='1' fill='red' /&gt;&lt;/svg&gt;\": speakOtherLanguage\n}\n</code></pre>  A much more useful legend should appear. As mentioned before, I\u2019m not a big fan of the Leaflet legend, as there are many more user friendly ways to display a legend, like having the a different <code>&lt;div&gt;</code> on the page.</p>","title":"Legendary Additions!"},{"location":"week_10/Lab/readme/#why-are-legends-important","text":"<p>They help to provide context into what is represented on the map. This makes sure as we construct our narrative that people know what is represented on the map and do not have to guess what is being shown.</p> <p>Since legends are so important, many people have implemented different versions of a legend on Leaflet, including your classmates!</p>","title":"Why are legends important?"},{"location":"week_10/Lab/readme/#implement-different-layouts-with-css-grid","text":"<p>Before we get into adding new plugins, CSS Grid is a powerful way to control how functionality relates to each other. The flexibility of grid helps to make sure that specific <code>rows</code> or <code>columns</code> are able to be targeted no matter what plugins we use.</p>","title":"Implement different layouts with CSS Grid"},{"location":"week_10/Lab/readme/#css-grid-legend","text":"<p>Let\u2019s revisit our <code>index.html</code> and create a new <code>div</code> element on the map layer called with an id of <code>legend</code>:</p>  <p>index.html <pre><code>        &lt;div id=\"map\"&gt;\n            &lt;div id=\"legend\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n</code></pre>  In our style.css we will turn the map into a grid and add a 4 by 4 grid as follows: <pre><code>#map{\n    height:90vh;\n    grid-area: mappanel;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n} \n</code></pre> </p>  <p></p>","title":"CSS Grid Legend"},{"location":"week_10/Lab/readme/#why-the-minmax01fr-instead-of-just-1fr","text":"<p>If you do <code>1fr</code> then you run the risk of images and other content overflowing and not respecting the grid when it is empty. You can read more about it here:</p> <ul> <li>https://css-tricks.com/preventing-a-grid-blowout/</li> </ul>","title":"Why the <code>minmax(0,1fr)</code> instead of just <code>1fr</code>?"},{"location":"week_10/Lab/readme/#justifying-and-aligning-our-content","text":"<p>While in the <code>#map</code> lets make sure our content fits in the middle of our grid by using <code>align-items: center</code> and <code>justify-items: center</code>. Align is used for horizontal alignment and justify is used for vertical adjustments. You can read more about align and justify here:</p> <ul> <li>https://www.digitalocean.com/community/tutorials/css-align-justify</li> </ul> <pre><code>#map{\n    height:90vh;\n    grid-area: mappanel;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: center;  \n} \n</code></pre>  <p>Let\u2019s add the legend to the lower right corner of our map, by adding the following CSS selector for <code>#legend</code>:</p> <p><pre><code>#legend{\n    grid-column: 1;\n    grid-row: 3;\n}\n</code></pre>  Notice the following: - <code>grid-column: 1;</code> says put this content into the first column! - <code>grid-row: 3;</code> says put this content into the 3rd row. Our style should look like this:</p> <p><pre><code>#legend{\n    grid-column: 1;\n    grid-row: 3;\n    align-items: center;\n    justify-items: center;\n}\n</code></pre>  To span multiple rows or columns ontop of specifying a number you can do <code>grid-column: 1 / span 2;</code> which will make the content span 2 columns from the left to right!</p>","title":"Justifying and aligning our content"},{"location":"week_10/Lab/readme/#class-exercise-1-getting-css-griddy-with-it","text":"<p>Practice using CSS Grid to change the location of the legend to the top right corner where the current legend is. Try to make it span more than 1 column or row.</p> <p>Bonus: See if you can remove the Leaflet Legend in the top right corner</p>  Answer  &gt;styles/style.css <pre><code>#map{\n    height:90vh;\n    grid-area: mappanel;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: center;  \n} \n\n#legend{\n    grid-column: 2 / span 2;\n    grid-row: 1;\n}\n</code></pre>  Bonus answer: &gt;.js/init.js <pre><code>// L.control.layers(null,layers,{collapsed:false}).addTo(map)\n</code></pre>  Awesome! Now the time has come to add our legendary HTML: &gt;index.html <pre><code>&lt;div id=\"legend\"&gt;\n    &lt;div&gt;Speaks English\n        &lt;svg height=\"10\" width=\"10\"&gt;&lt;circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"black\" stroke-width=\"1\" fill=\"green\" /&gt;&lt;/svg&gt; \n    &lt;/div&gt;\n    &lt;div&gt; Speaks Other Languages \n        &lt;svg height=\"10\" width=\"10\"&gt;&lt;circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"black\" stroke-width=\"1\" fill=\"green\" /&gt;&lt;/svg&gt; \n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>","title":"Class Exercise #1: Getting CSS-Griddy with it!"},{"location":"week_10/Lab/readme/#what-z-heck","text":"<p>Unfortunately, Leaflet has a higher <code>Z-index</code> than our legend so we need to use CSS to make our <code>Z-index</code> higher for the legend. If you think of a webpage as height being y-value, width being x-values, then the stacking of content is controlled by the Z-index. </p> <p>Basically, a Z-index is value that controls which layers are on-top of other layers in a webpage.</p> <p>We will change this in our style.css and make some other nice tweaks in the process:</p>  <p>styles/style.css <pre><code>#legend{\n    grid-column: 3;\n    grid-row: 1;\n    z-index: 9999;\n    background-color: white;\n    padding:10px;\n}\n</code></pre> </p>","title":"What Z-heck?"},{"location":"week_10/Lab/readme/#final-lab-code","text":"<p>Up to this point, you lab code should look like the following:</p>  <p>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;COVID-19 Vaccination Stories&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"shortcut icon\" href=\"#\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles/style.css\"&gt;\n\n        &lt;!-- Leaflet's css--&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n\n        &lt;!-- Leaflet's JavaScript--&gt;\n        &lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n     &lt;body&gt;\n        &lt;header&gt;Welcome to COVID-19 Vaccination Stories&lt;/header&gt;\n        &lt;div id=\"contents\"&gt;&lt;/div&gt;\n        &lt;div id=\"map\"&gt;\n        &lt;div id=\"legend\"&gt;\n            &lt;div&gt;Speaks English\n                &lt;svg height=\"10\" width=\"10\"&gt;\n                &lt;circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"black\" stroke-width=\"1\" fill=\"green\" /&gt;\n                &lt;/svg&gt; \n            &lt;/div&gt;\n\n            &lt;div&gt; Speaks Other Languages \n                &lt;svg height=\"10\" width=\"10\"&gt;\n                &lt;circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"black\" stroke-width=\"1\" fill=\"red\" /&gt;\n                &lt;/svg&gt; \n            &lt;/div&gt;\n        &lt;div&gt;\n    &lt;/div&gt;\n        &lt;div id=\"survey\"&gt;\n            &lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdqVT10bEbUrULMu6Etwj4ZBXGf-LAxcKohAINFbIdZmHS6OA/viewform?embedded=true\" width=\"640\" height=\"654\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading\u2026&lt;/iframe&gt;\n        &lt;/div&gt;\n        &lt;script src=\"js/init.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>  js/init.js <pre><code>const map = L.map('map').setView([34.0709, -118.444], 5);\n\nconst url = \"https://spreadsheets.google.com/feeds/list/1upD99bKWIO68jL8MKWV67KE-_H_TVn2bCwqyQkqNsBw/oxw5dh3/public/values?alt=json\"\n\nlet Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n    attribution: 'Tiles &amp;copy; Esri &amp;mdash; Esri, DeLorme, NAVTEQ',\n    maxZoom: 16\n});\n\nEsri_WorldGrayCanvas.addTo(map)\n\nfetch(url)\n    .then(response =&gt; {\n        return response.json();\n        })\n    .then(data =&gt;{\n                // console.log(data)\n                formatData(data)\n        }\n)\n\nlet speakFluentEnglish = L.featureGroup();\nlet speakOtherLanguage = L.featureGroup();\n\nlet exampleOptions = {\n    radius: 4,\n    fillColor: \"#ff7800\",\n    color: \"#000\",\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n}\n\nfunction addMarker(data){\n    if(data.doyouspeakenglishfluently == \"Yes\"){\n        exampleOptions.fillColor = \"green\"\n        speakFluentEnglish.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak English fluently&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n        }\n    else{\n        exampleOptions.fillColor = \"red\"\n        speakOtherLanguage.addLayer(L.circleMarker([data.lat,data.lng],exampleOptions).bindPopup(`&lt;h2&gt;Speak other languages&lt;/h2&gt;`))\n        createButtons(data.lat,data.lng,data.location)\n    }\n    return data.timestamp\n}\n\nfunction createButtons(lat,lng,title){\n    const newButton = document.createElement(\"button\");\n    newButton.id = \"button\"+title;\n    newButton.innerHTML = title;\n    newButton.setAttribute(\"lat\",lat); \n    newButton.setAttribute(\"lng\",lng);\n    newButton.addEventListener('click', function(){\n        map.flyTo([lat,lng]);\n    })\n    const spaceForButtons = document.getElementById('contents')\n    spaceForButtons.appendChild(newButton);\n}\n\nfunction formatData(theData){\n        const formattedData = []\n        const rows = theData.feed.entry\n        for(const row of rows) {\n          const formattedRow = {}\n          for(const key in row) {\n            if(key.startsWith(\"gsx$\")) {\n                  formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n            }\n          }\n          formattedData.push(formattedRow)\n        }\n        console.log(formattedData)\n        formattedData.forEach(addMarker)\n        speakFluentEnglish.addTo(map)\n        speakOtherLanguage.addTo(map)\n        let allLayers = L.featureGroup([speakFluentEnglish,speakOtherLanguage]);\n        map.fitBounds(allLayers.getBounds());        \n}\n\nlet layers = {\n    \"Speaks English\": speakFluentEnglish,\n    \"Speaks Other Languages\": speakOtherLanguage\n}\n\nL.control.layers(null,layers).addTo(map)\n</code></pre> </p> <p>styles/style.css <pre><code>body{\n    display: grid;\n    grid-template-columns: 1fr 1fr; \n    grid-auto-rows: minmax(5px, auto);\n    grid-template-areas: \"header header\" \"mappanel sidebar\" \n}\n\nheader{\n    grid-area: header;\n}\n\n#map{\n    height:90vh;\n    grid-area: mappanel;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n    grid-template-rows: repeat(3, minmax(0, 1fr));\n    align-items: center;\n    justify-items: center;  \n} \n\n#legend{\n    grid-column: 3;\n    grid-row: 1;\n    z-index: 9999;\n    background-color: white;\n    padding:10px;\n}\n\n#contents{\n    grid-area: sidebar;\n    display:grid;\n    grid-template-columns: repeat(2, 1fr);\n}\n\n/* fix for survey to fit in the iframe */\n#survey {\n    overflow: hidden;\n    /* 16:9 aspect ratio */\n    padding-top: 0%;\n    position: relative;\n}\n\n#survey iframe {\n   border: 0;\n   height: 100%;\n   left: 0;\n   position: absolute;\n   top: 0;\n   width: 100%;\n}\n</code></pre> </p>","title":"Final Lab Code"},{"location":"week_10/Lab/readme/#final-tech-tips","text":"<p></p> <p>Now that we have a better sense of how to use CSS grid, we can think about how to fit other libraries and tools.</p> <p>Evaluating the right libraries and tools for the task is an important part of being a web developer that is both ethically minded and able to contribute back to meaningful projects. </p>","title":"Final Tech Tips!"},{"location":"week_10/Lab/readme/#turfjs","text":"<p> https://turfjs.org/</p> <p>Turfjs is useful for running spatial analysis in our mapplications.</p> <p>Here is my example repo using Turf.js to count the number of points inside a particular boundary:</p> <p>https://github.com/albertkun/leaflet-tufjs-spatial-join</p>","title":"Turf.js"},{"location":"week_10/Lab/readme/#chartjs","text":"<p></p> <p>https://www.chartjs.org/</p> <p>Chartjs is useful (but complex) library for creating charts in our mapplications.</p> <p>Below is an example repository demonstrating how to use Chartjs with your Leaflet data: https://github.com/albertkun/leaflet-chartjs</p>","title":"Chart.js"},{"location":"week_10/Lab/readme/#geojsonio","text":"<p></p> <p>http://geojson.io/</p> <p>Remember this tool? GeoJSON.io is useful for creating, converting, or quickly editing spatial data online.</p>","title":"GeoJSON.io"},{"location":"week_10/Lab/readme/#mapshaper","text":"<p></p> <p>https://mapshaper.org/</p> <p>This online tool helps to reduce file sizes of GeoJSONs and do other geoprocessing of GIS data:</p>  <p>Main Tip: Choose the right tool for the job!</p>","title":"MapShaper"},{"location":"week_10/Lab/readme/#building-content-from-scratch-check-w3-schools","text":"<p></p> <p>https://www.w3schools.com/howto/default.asp</p> <p>Similar to Mozilla Developer Network for documentation, W3 schools provides a lot of nice how-to tutorials on how to implement common website features, interfaces, and functions.</p>","title":"Building Content from scratch? Check W3 Schools"},{"location":"week_10/Lab/readme/#extending-leaflet-with-plugins","text":"<p>Owing to the opensource nature of Leaflet, people have written many reusable tools to help with common tasks. As a matter of fact, if you have written a function for Leaflet that you think is reusable, you can go ahead and submit to their list of plugins too! Ah, the awesomeness of open source!</p>","title":"Extending Leaflet with Plugins"},{"location":"week_10/Lab/readme/#balance-open-source-with-an-open-and-ethical-mind","text":"<p>Of course, open source has its drawbacks too, learning to customize someone elses poorly written code with poor documentation can be a huge timesink.</p> <p>Balancing the trade-off between trying to reuse someone\u2019s code and creating your own is an important step in becoming a seasoned developer!</p> <p>Working within and with other projects bring us to our final lab topic of utilizing other people\u2019s Leaflet widgets and plugins.</p>","title":"Balance Open Source with an open and ethical mind"},{"location":"week_10/Lab/readme/#final-class-exercise","text":"","title":"Final Class Exercise:"},{"location":"week_10/Lab/readme/#due-61-in-class","text":"<p>Join breakout rooms with your group. With the remaining time, look at some of the plugins below and try to implement them into your mapplication or your own group projects:    - UI     - https://github.com/noerw/leaflet-sidebar-v2     - https://github.com/turbo87/sidebar-v2/     - https://github.com/mapshakers/leaflet-control-window     - https://cliffcloud.github.io/Leaflet.Sleep/   - Markers:     - https://github.com/masajid390/BeautifyMarker     - https://github.com/mapshakers/leaflet-icon-pulse     - https://dagjomar.github.io/Leaflet.ParallaxMarker/     - https://wbkd.github.io/leaflet-swoopy/   - Others     - https://github.com/albertkun/leaflet_hex_timeslider</p> <p>Leave a review of them in the Git-Practicing Repo: - https://github.com/albertkun/21S-AA191-GitPracticing/blob/main/review.md</p> <p>Feel free to try others not in this list and add it to the doc.</p> <p>Pay attention to how important good documentation is and how your own group projects <code>readme.md</code> should be structured. Creating a <code>branch</code> will be helpful when testing new features. Refer to lab 8 for a refresher.</p>","title":"Due 6/1 in class"},{"location":"week_10/Lab/readme/#submission","text":"<p>As a group, make a pull request in the following repo with your comments on a plugin: - https://github.com/albertkun/21S-AA191-GitPracticing/blob/main/review.md</p>","title":"Submission"}]}